" | awk '{print $1}'"),
stdout = TRUE))
}
)
dscript_data_dir <- '../algorithms/D-SCRIPT-main/data/partitions/'
training_files <- list.files(path=dscript_data_dir, pattern = 'pos')
training_files <- list.files(path=dscript_data_dir)
dscript_data_dir <- '../algorithms/D-SCRIPT-main/data/partitions/'
training_files <- list.files(path=dscript_data_dir)
partition_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
training_files
filenames <- tstrsplit(training_files, '_', keep=c(1,3))
filenames
filenames <- tstrsplit(tstrsplit(training_files, '.txt', keep=1)[[1]], '_', keep=c(1,3))
filenames
names(partition_sizes) <- paste(filenames[[1]], filenames[[2]])
partition_sizes
partition_sizes <- prettyNum(partition_sizes, big.mark = ',')
partition_sizes
original_sizes <- get_sizes('original')
original_sizes <- c(original_sizes, c('gold' = prettyNum(as.integer(system2("wc",
args = c("-l", '../Datasets_PPIs/Hippiev2.3/Intra0_Intra1_pos_rr.txt',
" | awk '{print $1}'"),
stdout = TRUE)) * 2, big.mark = ',')))
rewired_sizes <- get_sizes('rewired')
sprint_data_dir <- '../algorithms/SPRINT/data/partitions/'
training_files <- list.files(path=sprint_data_dir, pattern = 'pos')
partition_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
filenames <- tstrsplit(training_files, '_', keep=c(1,3))
names(partition_sizes) <- paste(filenames[[1]], filenames[[2]])
partition_sizes <- prettyNum(partition_sizes, big.mark = ',')
get_sizes_dscript <- function(directory) {
dscript_data_dir <- paste0('../algorithms/D-SCRIPT-main/data/', directory, '/')
training_files <- list.files(path=dscript_data_dir, pattern = 'train')
train_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- tstrsplit(training_files, '_', keep=1)[[1]]
train_sizes <- prettyNum(train_sizes, big.mark = ',')
return(train_sizes)
}
original_dscript_sizes <- get_sizes('original')
gold_size <- prettyNum(as.integer(system2("wc",
args = c("-l",
'../algorithms/D-SCRIPT-main/data/gold/Intra1.txt',
" | awk '{print $1}'"),
stdout = TRUE)), big.mark = ',')
names(gold_size) <- 'gold'
original_dscript_sizes <- c(original_dscript_sizes, gold_size)
rewired_dscript_sizes <- get_sizes('rewired')
dscript_data_dir <- '../algorithms/D-SCRIPT-main/data/partitions/'
training_files <- list.files(path=dscript_data_dir)
partition_sizes_dscript <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
filenames <- tstrsplit(tstrsplit(training_files, '.txt', keep=1)[[1]], '_', keep=c(1,3))
names(partition_sizes_dscript) <- paste(filenames[[1]], filenames[[2]])
partition_sizes_dscript <- prettyNum(partition_sizes_dscript, big.mark = ',')
partition_sizes
partition_sizes_dscript
original_dscript_sizes
original_sizes
get_sizes_dscript <- function(directory) {
dscript_data_dir <- paste0('../algorithms/D-SCRIPT-main/data/', directory, '/')
training_files <- list.files(path=dscript_data_dir, pattern = 'train')
train_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- tstrsplit(training_files, '_', keep=1)[[1]]
train_sizes <- prettyNum(train_sizes, big.mark = ',')
return(train_sizes)
}
original_dscript_sizes <- get_sizes_dscript('original')
gold_size <- prettyNum(as.integer(system2("wc",
args = c("-l",
'../algorithms/D-SCRIPT-main/data/gold/Intra1.txt',
" | awk '{print $1}'"),
stdout = TRUE)), big.mark = ',')
names(gold_size) <- 'gold'
original_dscript_sizes <- c(original_dscript_sizes, gold_size)
rewired_dscript_sizes <- get_sizes_dscript('rewired')
dscript_data_dir <- '../algorithms/D-SCRIPT-main/data/partitions/'
training_files <- list.files(path=dscript_data_dir)
partition_sizes_dscript <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
filenames <- tstrsplit(tstrsplit(training_files, '.txt', keep=1)[[1]], '_', keep=c(1,3))
names(partition_sizes_dscript) <- paste(filenames[[1]], filenames[[2]])
partition_sizes_dscript <- prettyNum(partition_sizes_dscript, big.mark = ',')
original_sizes
original_dscript_sizes
rewired_sizes
rewired_dscript_sizes
partition_sizes
partition_sizes_dscript
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(latex2exp)
measure <- 'Accuracy'
original_results <- fread(paste0('results/original_', measure, '.csv'))
gold_standard_results <- fread(paste0('results/gold_standard_', measure, '.csv'))
original_results <- rbind(original_results, gold_standard_results)
original_results$Test <- 'Original'
rewired_results <- fread(paste0('results/rewired_', measure, '.csv'))
rewired_results$Test <- 'Rewired'
partition_results <- fread(paste0('results/partition_', measure, '.csv'))
colnames(partition_results) <- c('Model', 'Dataset', measure, 'Test')
all_results <- rbind(original_results, rewired_results)
all_results <- all_results[, Model := factor(Model,
levels=c('SPRINT',
'deepPPI_FC', 'deepPPI_LSTM',
'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy_Turvy',
'RF_PCA','SVM_PCA', 'RF_MDS', 'SVM_MDS',
'RF_node2vec',  'SVM_node2vec', 'degree_hf', 'degree_cons'))]
all_results <- all_results[, Dataset := factor(Dataset,
levels = c('gold_standard', 'huang', 'guo', 'du', 'pan', 'richoux-regular', 'richoux-strict'))]
all_results <- rbind(all_results, partition_results)
all_results[, Test := factor(Test, levels=c('Original', 'Rewired', 'both->0', 'both->1', '0->1'))]
all_results[, Model := gsub('deepPPI_FC', 'Richoux-FC', Model)]
all_results[, Model := gsub('deepPPI_LSTM', 'Richoux-LSTM', Model)]
all_results[, Model := gsub('RF_PCA', 'RF PCA', Model)]
all_results[, Model := gsub('SVM_PCA', 'SVM PCA', Model)]
all_results[, Model := gsub('RF_MDS', 'RF MDS', Model)]
all_results[, Model := gsub('SVM_MDS', 'SVM MDS', Model)]
all_results[, Model := gsub('RF_node2vec', 'RF node2vec', Model)]
all_results[, Model := gsub('SVM_node2vec', 'SVM node2vec', Model)]
all_results[, Model := gsub('degree_hf', 'Harmonic Function', Model)]
all_results[, Model := gsub('degree_cons', 'Global and Local Consistency', Model)]
all_results[, Model := gsub('Topsy_Turvy', 'Topsy Turvy', Model)]
all_results <- all_results[, Model := factor(Model,
levels=c('SPRINT',
'Richoux-FC', 'Richoux-LSTM',
'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy Turvy', 'RF PCA','SVM PCA', 'RF MDS', 'SVM MDS',
'RF node2vec',  'SVM node2vec', 'Harmonic Function', 'Global and Local Consistency'))]
colorBlindBlack8  <- c('#000000', '#E69F00', '#56B4E9', '#009E73',
'#F0E442', '#0072B2', '#D55E00', '#CC79A7')
result_mat <- as.matrix(dcast(all_results, Model ~ Dataset + Test, value.var = measure))
rownames(result_mat) <- result_mat[, 'Model']
result_mat <- result_mat[, -1]
class(result_mat) <- 'numeric'
colnames(result_mat)[colnames(result_mat) == 'gold_standard_Original'] <- 'Gold_Original'
annotation_col <- as.data.frame(tstrsplit(colnames(result_mat), '_', keep = 2), col.names = c('Test'))
rownames(annotation_col) <- colnames(result_mat)
annotation_col$Test <- gsub('both', 'Inter' ,annotation_col$Test)
annotation_col$Test <- gsub('0', 'Intra-0' ,annotation_col$Test)
annotation_col$Test <- gsub('1', 'Intra-1' ,annotation_col$Test)
annotation_col$Test <- factor(annotation_col$Test,
levels = c('Original', 'Rewired', 'Inter->Intra-1', 'Inter->Intra-0', 'Intra-0->Intra-1'))
annotation_col <- annotation_col[order(annotation_col$Test), , drop = FALSE]
result_mat <- result_mat[, rownames(annotation_col)]
# training data sizes
get_sizes <- function(directory) {
sprint_data_dir <- paste0('../algorithms/SPRINT/data/', directory, '/')
training_files <- list.files(path=sprint_data_dir, pattern = 'train_pos')
train_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- tstrsplit(training_files, '_', keep=1)[[1]]
train_sizes <- prettyNum(train_sizes, big.mark = ',')
return(train_sizes)
}
original_sizes <- get_sizes('original')
original_sizes <- c(original_sizes, c('gold' = prettyNum(as.integer(system2("wc",
args = c("-l", '../Datasets_PPIs/Hippiev2.3/Intra0_Intra1_pos_rr.txt',
" | awk '{print $1}'"),
stdout = TRUE)) * 2, big.mark = ',')))
rewired_sizes <- get_sizes('rewired')
sprint_data_dir <- '../algorithms/SPRINT/data/partitions/'
training_files <- list.files(path=sprint_data_dir, pattern = 'pos')
partition_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
filenames <- tstrsplit(training_files, '_', keep=c(1,3))
names(partition_sizes) <- paste(filenames[[1]], filenames[[2]])
partition_sizes <- prettyNum(partition_sizes, big.mark = ',')
get_sizes_dscript <- function(directory) {
dscript_data_dir <- paste0('../algorithms/D-SCRIPT-main/data/', directory, '/')
training_files <- list.files(path=dscript_data_dir, pattern = 'train')
train_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- tstrsplit(training_files, '_', keep=1)[[1]]
train_sizes <- prettyNum(train_sizes, big.mark = ',')
return(train_sizes)
}
original_dscript_sizes <- get_sizes_dscript('original')
gold_size <- prettyNum(as.integer(system2("wc",
args = c("-l",
'../algorithms/D-SCRIPT-main/data/gold/Intra1.txt',
" | awk '{print $1}'"),
stdout = TRUE)), big.mark = ',')
names(gold_size) <- 'gold'
original_dscript_sizes <- c(original_dscript_sizes, gold_size)
rewired_dscript_sizes <- get_sizes_dscript('rewired')
dscript_data_dir <- '../algorithms/D-SCRIPT-main/data/partitions/'
training_files <- list.files(path=dscript_data_dir)
partition_dscript_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
filenames <- tstrsplit(tstrsplit(training_files, '.txt', keep=1)[[1]], '_', keep=c(1,3))
names(partition_dscript_sizes) <- paste(filenames[[1]], filenames[[2]])
partition_dscript_sizes <- prettyNum(partition_dscript_sizes, big.mark = ',')
pheatmap(t(result_mat),
annotation_row = annotation_col,
annotation_colors = list(
Test = c('Original'='#AA4499', 'Rewired'='#DDCC77','Inter->Intra-1'='#888888', 'Inter->Intra-0'='#44AA99', 'Intra-0->Intra-1'='#661100')
),
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_col = 7,
gaps_row = c(7,13,18,23),
display_numbers = TRUE,
legend = FALSE,
#filename = paste0('plots/heatmap_results_', measure, '.pdf'),
#width=8,
#height=10,
cex = 1,
labels_row = c(
paste0('GOLD STANDARD (', original_sizes['gold'], '/', original_dscript_sizes['gold'], ')'),
paste0('HUANG (', original_sizes['huang'], '/', original_dscript_sizes['huang'], ')'),
paste0('GUO (', original_sizes['guo'], '/', original_dscript_sizes['guo'], ')'),
paste0('DU (', original_sizes['du'], '/', original_dscript_sizes['du'], ')'),
paste0('PAN (', original_sizes['pan'], '/', original_dscript_sizes['pan'], ')'),
paste0('RICHOUX-REGULAR (', original_sizes['richoux-regular'], '/', original_dscript_sizes['richoux-regular'], ')'),
paste0('RICHOUX-STRICT (', original_sizes['richoux-strict'], '/', original_dscript_sizes['richoux-strict'], ')'),
#rewired
paste0('HUANG (', rewired_sizes['huang'], ')'),
paste0('GUO (', rewired_sizes['guo'], ')'),
paste0('DU (', rewired_sizes['du'], ')'),
paste0('PAN (', rewired_sizes['pan'], ')'),
paste0('RICHOUX-REGULAR (', rewired_sizes['richoux-regular'], ')'),
paste0('RICHOUX-STRICT (', rewired_sizes['richoux-strict'], ')'),
#partition both ->1
paste0('HUANG (', partition_sizes['huang both'], ')'),
paste0('GUO (', partition_sizes['guo both'], ')'),
paste0('DU (', partition_sizes['du both'], ')'),
paste0('PAN (', partition_sizes['pan both'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux both'], ')'),
#partition both -> 0
paste0('HUANG (', partition_sizes['huang both'], ')'),
paste0('GUO (', partition_sizes['guo both'], ')'),
paste0('DU (', partition_sizes['du both'], ')'),
paste0('PAN (', partition_sizes['pan both'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux both'], ')'),
#partition 0 -> 1
paste0('HUANG (', partition_sizes['huang 0'], ')'),
paste0('GUO (', partition_sizes['guo 0'], ')'),
paste0('DU (', partition_sizes['du 0'], ')'),
paste0('PAN (', partition_sizes['pan 0'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux 0'], ')')
),
labels_col = c('SPRINT', 'Richoux-\nFC', 'Richoux-\nLSTM', 'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy Turvy',
'RF-PCA', 'SVM-PCA', 'RF-MDS', 'SVM-MDS', 'RF-\nnode2vec', 'SVM-\nnode2vec',
'Harmonic\nFunction', 'Global and\nLocal Consistency')
)
pheatmap(t(result_mat),
annotation_row = annotation_col,
annotation_colors = list(
Test = c('Original'='#AA4499', 'Rewired'='#DDCC77','Inter->Intra-1'='#888888', 'Inter->Intra-0'='#44AA99', 'Intra-0->Intra-1'='#661100')
),
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_col = 7,
gaps_row = c(7,13,18,23),
display_numbers = TRUE,
legend = FALSE,
#filename = paste0('plots/heatmap_results_', measure, '.pdf'),
#width=8,
#height=10,
cex = 1,
labels_row = c(
paste0('GOLD STANDARD (', original_sizes['gold'], '/', original_dscript_sizes['gold'], ')'),
paste0('HUANG (', original_sizes['huang'], '/', original_dscript_sizes['huang'], ')'),
paste0('GUO (', original_sizes['guo'], '/', original_dscript_sizes['guo'], ')'),
paste0('DU (', original_sizes['du'], '/', original_dscript_sizes['du'], ')'),
paste0('PAN (', original_sizes['pan'], '/', original_dscript_sizes['pan'], ')'),
paste0('RICHOUX-REGULAR (', original_sizes['richoux-regular'], '/', original_dscript_sizes['richoux-regular'], ')'),
paste0('RICHOUX-STRICT (', original_sizes['richoux-strict'], '/', original_dscript_sizes['richoux-strict'], ')'),
#rewired
paste0('HUANG (', rewired_sizes['huang'], '/', rewired_dscript_sizes['huang'], ')'),
paste0('GUO (', rewired_sizes['guo'], '/', rewired_dscript_sizes['guo'], ')'),
paste0('DU (', rewired_sizes['du'], '/', rewired_dscript_sizes['du'], ')'),
paste0('PAN (', rewired_sizes['pan'], '/', rewired_dscript_sizes['pan'], ')'),
paste0('RICHOUX-REGULAR (', rewired_sizes['richoux-regular'], '/', rewired_dscript_sizes['richoux-regular'], ')'),
paste0('RICHOUX-STRICT (', rewired_sizes['richoux-strict'], '/', rewired_dscript_sizes['richoux-strict'], ')'),
#partition both ->1
paste0('HUANG (', partition_sizes['huang both'], '/', partition_dscript_sizes['huang both'], ')'),
paste0('GUO (', partition_sizes['guo both'], '/', partition_dscript_sizes['guo both'], ')'),
paste0('DU (', partition_sizes['du both'], '/', partition_dscript_sizes['du both'], ')'),
paste0('PAN (', partition_sizes['pan both'], '/', partition_dscript_sizes['pan both'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux both'], '/', partition_dscript_sizes['richoux both'], ')'),
#partition both -> 0
paste0('HUANG (', partition_sizes['huang both'], '/', partition_dscript_sizes['huang both'], ')'),
paste0('GUO (', partition_sizes['guo both'], '/', partition_dscript_sizes['guo both'], ')'),
paste0('DU (', partition_sizes['du both'], '/', partition_dscript_sizes['du both'], ')'),
paste0('PAN (', partition_sizes['pan both'], '/', partition_dscript_sizes['pan both'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux both'], '/', partition_dscript_sizes['richoux both'], ')'),
#partition 0 -> 1
paste0('HUANG (', partition_sizes['huang 0'], '/', partition_dscript_sizes['huang 0'], ')'),
paste0('GUO (', partition_sizes['guo 0'], '/', partition_dscript_sizes['guo 0'], ')'),
paste0('DU (', partition_sizes['du 0'], '/', partition_dscript_sizes['du 0'], ')'),
paste0('PAN (', partition_sizes['pan 0'], '/', partition_dscript_sizes['pan 0'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux 0'], '/', partition_dscript_sizes['richoux 0'], ')')
),
labels_col = c('SPRINT', 'Richoux-\nFC', 'Richoux-\nLSTM', 'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy Turvy',
'RF-PCA', 'SVM-PCA', 'RF-MDS', 'SVM-MDS', 'RF-\nnode2vec', 'SVM-\nnode2vec',
'Harmonic\nFunction', 'Global and\nLocal Consistency')
)
original_sizes <- get_sizes('original')
original_sizes <- c(original_sizes, c('gold' = prettyNum(as.integer(system2("wc",
args = c("-l", '../Datasets_PPIs/Hippiev2.3/Intra0_Intra1_pos_rr.txt',
" | awk '{print $1}'"),
stdout = TRUE)) * 2, big.mark = ',')))
pheatmap(t(result_mat),
annotation_row = annotation_col,
annotation_colors = list(
Test = c('Original'='#AA4499', 'Rewired'='#DDCC77','Inter->Intra-1'='#888888', 'Inter->Intra-0'='#44AA99', 'Intra-0->Intra-1'='#661100')
),
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_col = 7,
gaps_row = c(7,13,18,23),
display_numbers = TRUE,
legend = FALSE,
#filename = paste0('plots/heatmap_results_', measure, '.pdf'),
#width=8,
#height=10,
cex = 1,
labels_row = c(
paste0('GOLD STANDARD (', original_sizes['gold'], '/', original_dscript_sizes['gold'], ')'),
paste0('HUANG (', original_sizes['huang'], '/', original_dscript_sizes['huang'], ')'),
paste0('GUO (', original_sizes['guo'], '/', original_dscript_sizes['guo'], ')'),
paste0('DU (', original_sizes['du'], '/', original_dscript_sizes['du'], ')'),
paste0('PAN (', original_sizes['pan'], '/', original_dscript_sizes['pan'], ')'),
paste0('RICHOUX-REGULAR (', original_sizes['richoux-regular'], '/', original_dscript_sizes['richoux-regular'], ')'),
paste0('RICHOUX-STRICT (', original_sizes['richoux-strict'], '/', original_dscript_sizes['richoux-strict'], ')'),
#rewired
paste0('HUANG (', rewired_sizes['huang'], '/', rewired_dscript_sizes['huang'], ')'),
paste0('GUO (', rewired_sizes['guo'], '/', rewired_dscript_sizes['guo'], ')'),
paste0('DU (', rewired_sizes['du'], '/', rewired_dscript_sizes['du'], ')'),
paste0('PAN (', rewired_sizes['pan'], '/', rewired_dscript_sizes['pan'], ')'),
paste0('RICHOUX-REGULAR (', rewired_sizes['richoux-regular'], '/', rewired_dscript_sizes['richoux-regular'], ')'),
paste0('RICHOUX-STRICT (', rewired_sizes['richoux-strict'], '/', rewired_dscript_sizes['richoux-strict'], ')'),
#partition both ->1
paste0('HUANG (', partition_sizes['huang both'], '/', partition_dscript_sizes['huang both'], ')'),
paste0('GUO (', partition_sizes['guo both'], '/', partition_dscript_sizes['guo both'], ')'),
paste0('DU (', partition_sizes['du both'], '/', partition_dscript_sizes['du both'], ')'),
paste0('PAN (', partition_sizes['pan both'], '/', partition_dscript_sizes['pan both'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux both'], '/', partition_dscript_sizes['richoux both'], ')'),
#partition both -> 0
paste0('HUANG (', partition_sizes['huang both'], '/', partition_dscript_sizes['huang both'], ')'),
paste0('GUO (', partition_sizes['guo both'], '/', partition_dscript_sizes['guo both'], ')'),
paste0('DU (', partition_sizes['du both'], '/', partition_dscript_sizes['du both'], ')'),
paste0('PAN (', partition_sizes['pan both'], '/', partition_dscript_sizes['pan both'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux both'], '/', partition_dscript_sizes['richoux both'], ')'),
#partition 0 -> 1
paste0('HUANG (', partition_sizes['huang 0'], '/', partition_dscript_sizes['huang 0'], ')'),
paste0('GUO (', partition_sizes['guo 0'], '/', partition_dscript_sizes['guo 0'], ')'),
paste0('DU (', partition_sizes['du 0'], '/', partition_dscript_sizes['du 0'], ')'),
paste0('PAN (', partition_sizes['pan 0'], '/', partition_dscript_sizes['pan 0'], ')'),
paste0('RICHOUX-UNIPROT (', partition_sizes['richoux 0'], '/', partition_dscript_sizes['richoux 0'], ')')
),
labels_col = c('SPRINT', 'Richoux-\nFC', 'Richoux-\nLSTM', 'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy Turvy',
'RF-PCA', 'SVM-PCA', 'RF-MDS', 'SVM-MDS', 'RF-\nnode2vec', 'SVM-\nnode2vec',
'Harmonic\nFunction', 'Global and\nLocal Consistency')
)
intra01 <- fread('../algorithms/D-SCRIPT-main/data/gold/Intra0_Intra1.txt')
head(intra01)
prot <- unique(intra01$V1, intra01$V2)
prot <- unique(c(intra01$V1, intra01$V2))
length(prot)
141842/2
71000/22*10^6
71000/(22*10^6)
tmp <- fread("~/Downloads/rRNA.txt")
View(tmp)
tmp$V9[1]
tstrsplit(tmp$V9[1], ' ', keep=1)
sapply(tstrsplit(tmp$V9, '; '), tstrsplit, ' ', keep=1)
sapply(tstrsplit(tmp$V9[1], '; '), tstrsplit, ' ', keep=1)
sapply(tstrsplit(tmp$V9[1], '; '), fun(x){tstrsplit(x, ' ', keep=1)[1]})
sapply(tstrsplit(tmp$V9[1], '; '), function(x){tstrsplit(x, ' ', keep=1)[1]})
sapply(tstrsplit(tmp$V9[1], '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
names <- sapply(tstrsplit(tmp$V9[1], '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
tmp[, names := tstrsplit(V9, '; ')]
names <- sapply(tstrsplit(tmp$V9, '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
names <- lapply(tstrsplit(tmp$V9, '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
names <- rbindlist(names)
View(names)
names <- sapply(tstrsplit(tmp$V9[1], '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
names <- sapply(tstrsplit(tmp$V9[2], '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
tmp[, names := tstrsplit(V9, '; ')]
tmp[, tstrsplit(V9, '; ')]
tmp[, (names) := tstrsplit(V9, '; ')]
View(tmp)
tmp <- tmp[, -V9]
tmp <- tmp[, -c("V9")]
sapply(tmp, tstrsplit(' ', keep=1))
sapply(tmp, function(x){tstrsplit(x, ' ', keep=1)[[1]]})
sapply(tmp, function(x){tstrsplit(x, ' ', keep=2)[[1]]})
sapply(tmp[, names], function(x){tstrsplit(x, ' ', keep=2)[[1]]})
sapply(tmp[, (names)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})
sapply(tmp[, get(names)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})
sapply(tmp[, eval(names)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})
sapply(tmp[, eval(names)], function(x){tstrsplit(x, ' ', keep=1)[[1]]})
sapply(tmp[, c(9:23)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})
tmp2 <- tmp[, (names) := sapply(tmp[, c(9:23)], function(x){tstrsplit(x, ' ', keep=2)[[1]]}))
tmp2 <- tmp[, (names) := sapply(tmp[, c(9:23)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})]
tmp2 <- tmp[, (names) := lapply(tmp[, c(9:23)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})]
View(tmp2)
fwrite(tmp, '~/Downloads/rRNAs.csv')
tmp2 <- fread(~/Downloads/rRNAs.csv)
tmp2 <- fread("~/Downloads/rRNAs.csv")
View(tmp2)
sapply(tmp2, noquote)
sapply(tmp2$gene_id, noquote)
str_remove(tmp$gene_id, "")
library(stringr)
str_remove(tmp$gene_id, "")
str_remove(tmp$gene_id, '\"')
str_remove_all(tmp$gene_id, '\"')
tmp[, string_remove_all(get(names), '\"')]
tmp[, str_remove_all(get(names), '\"')]
tmp[, str_remove_all(gene_id, '\"')]
sapply(tmp, str_remove_all, '\"')
View(tmp)
tmp[, (names) := lapply(.SD, str_remove_all, '\"'), .SDcols=names]
View(tmp)
tmp[, (names) := lapply(.SD, str_remove_all, ';'), .SDcols=names]
View(tmp)
tmp[, (names) := lapply(.SD, function(x){x[x == 'NA'] <- NA}), .SDcols=names]
View(tmp)
tmp <- fread("~/Downloads/rRNA.txt")
names <- sapply(tstrsplit(tmp$V9[1], '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
tmp[, (names) := tstrsplit(V9, '; ')]
names <- sapply(tstrsplit(tmp$V9[2], '; '), function(x){tstrsplit(x, ' ', keep=1)[[1]]})
tmp[, (names) := tstrsplit(V9, '; ')]
View(tmp)
tmp[, -c("V9")]
tmp <- tmp[, -c("V9")]
tmp2 <- tmp[, (names) := lapply(tmp[, c(9:23)], function(x){tstrsplit(x, ' ', keep=2)[[1]]})]
View(tmp2)
View(tmp)
tmp[, (names) := lapply(.SD, str_remove_all, '\"'), .SDcols=names]
tmp[, (names) := lapply(.SD, str_remove_all, ';'), .SDcols=names]
View(tmp)
tmp[, (names) := lapply(.SD, type.convert, as.is=TRUE), .SDcols=names]
View(tmp)
fwrite(tmp, '~/Downloads/rRNA.csv')
tmp <- tmp[transcript_biotype == 'rRNA']
fwrite(tmp, '~/Downloads/rRNA.csv')
unique(tmp$gene_name)
