category.names = TeX(c('$\\it{INTRA}_0$', '$\\it{INTRA}_1$', '$\\it{INTRA}_2$')),
main = 'GOLD STANDARD',
filename = NULL,
disable.logging = TRUE,
# Output features
imagetype="png" ,
height = 3,
width = 3,
units = 'cm',
resolution = 600,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = myCol,
# Numbers
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
# Set names
main.cex = 1.5,
main.pos = c(0.5, 1.5),
main.fontfamily = "sans",
cat.cex = 1.5,
cat.default.pos = "outer",
cat.pos = c(0, 0, 0),
cat.fontfamily = "sans",
rotation = 1)
#plot_list <- append(plot_list, setNames(list(venn_plot), 'gold'))
g <- arrangeGrob(gTree(children=plot_list[['huang']]),
gTree(children=plot_list[['guo']]),
gTree(children=plot_list[['du']]),
gTree(children=plot_list[['pan']]),
gTree(children=plot_list[['richoux']]),
gTree(children=plot_list[['gold']]),
nrow=2)
ggsave('plots/venn_overlaps_partitions.pdf', g, height = 5, width = 15)
library(data.table)
library(ggplot2)
library(RColorBrewer)
#### result prefixes
custom_res <- '../algorithms/Custom/results/'
deepFE_res <- '../algorithms/DeepFE-PPI/result/custom/'
deepPPI_res <- '../algorithms/DeepPPI/keras/results_custom/'
seqppi_res <- '../algorithms/seq_ppi/binary/model/lasagna/results/'
sprint_res <- '../algorithms/SPRINT/results/'
#### time files
all_times <- data.table(Test = character(), Model=character(), Dataset=character(), `Time [s]`=numeric())
# custom
custom_times <- lapply(paste0(custom_res, list.files(custom_res, pattern='time*')), fread)
file_names <- tstrsplit(list.files(custom_res, pattern='time*'), '.txt', keep=1)[[1]]
file_names[grepl('richoux_regular', file_names, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', file_names[grepl('richoux_regular', file_names, fixed=TRUE)])
file_names[grepl('richoux_strict', file_names, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', file_names[grepl('richoux_strict', file_names, fixed=TRUE)])
file_names <- tstrsplit(file_names, '_', keep=c(2, 3, 4))
names(custom_times) <- paste(file_names[[1]], file_names[[2]], file_names[[3]], sep='_')
custom_times_df <- rbindlist(custom_times[!grepl('partition', names(custom_times), fixed=TRUE)], idcol = 'filename')
partition_times_df <- rbindlist(custom_times[grepl('partition', names(custom_times), fixed=TRUE)], idcol = 'filename')
custom_times_df <- custom_times_df[, c('test', 'dataset', 'encoding') := tstrsplit(filename, '_')]
partition_times_df <- partition_times_df[, c('test', 'dataset', 'encoding') := tstrsplit(filename, '_')]
names(custom_times_df) <- c('Filename', 'Algorithm', 'Time [s]', 'Test', 'Dataset', 'Encoding')
names(partition_times_df) <- c('Filename', 'Part_Train', 'Part_Test', 'Algorithm', 'Time [s]', 'Test', 'Dataset', 'Encoding')
custom_times_df$Part_Train <- NA
custom_times_df$Part_Test <- NA
custom_times_df[, Model := paste(Algorithm, Encoding, sep='_')]
partition_times_df[, Model := paste(Algorithm, Encoding, Part_Train, Part_Test, sep='_')]
all_times_custom <- rbind(custom_times_df, partition_times_df)
fwrite(all_times_custom, '../algorithms/Custom/results/run_t.csv')
all_times <- rbind(all_times, all_times_custom[, c('Test', 'Model', 'Dataset','Time [s]')])
# deepFE
deepFE_times <- lapply(paste0(deepFE_res, list.files(deepFE_res, pattern = 'time*', recursive = TRUE)), fread)
file_names <- tstrsplit(basename(list.files(deepFE_res, pattern = 'time*', recursive = TRUE)), '.txt', keep=1)[[1]]
file_names[grepl('richoux_regular', file_names, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', file_names[grepl('richoux_regular', file_names, fixed=TRUE)])
file_names[grepl('richoux_strict', file_names, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', file_names[grepl('richoux_strict', file_names, fixed=TRUE)])
names(deepFE_times) <- file_names
deepFE_times <- rbindlist(deepFE_times, idcol='Filename')
deepFE_times <- deepFE_times[, c('Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', keep=c(2,3,4,5), fill = NA)]
deepFE_times <- deepFE_times[, Model := ifelse(is.na(Part_Train),
'DeepFE',
paste('DeepFE', Part_Train, Part_Test, sep='_'))]
colnames(deepFE_times) <-c('Filename', 'Time [s]', 'Test', 'Dataset', 'Part_Train', 'Part_Test', 'Model')
fwrite(deepFE_times, '../algorithms/DeepFE-PPI/result/custom/run_t.csv')
all_times <- rbind(all_times, deepFE_times[, c('Test', 'Model', 'Dataset', 'Time [s]')])
# deepPPI
deepPPI_times <- fread(paste0(deepPPI_res, 'all_times.txt'))
colnames(deepPPI_times) <- c('Filename', 'Time [s]')
deepPPI_times$Filename[grepl('richoux_regular', deepPPI_times$Filename, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', deepPPI_times$Filename[grepl('richoux_regular', deepPPI_times$Filename, fixed=TRUE)])
deepPPI_times$Filename[grepl('richoux_strict', deepPPI_times$Filename, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', deepPPI_times$Filename[grepl('richoux_strict', deepPPI_times$Filename, fixed=TRUE)])
deepPPI_times <- deepPPI_times[, c('Model', 'Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', fill=NA)]
deepPPI_times <- deepPPI_times[, Part_Train := tstrsplit(Part_Train, 'tr', keep = 2)]
deepPPI_times <- deepPPI_times[, Part_Test := tstrsplit(Part_Test, 'te', keep = 2)]
deepPPI_times <- deepPPI_times[, Model := ifelse(is.na(Part_Train),
paste0('Richoux-', Model),
paste('Richoux', Model, Part_Train, Part_Test, sep='-'))]
all_times <- rbind(all_times, deepPPI_times[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
# seq_ppi
seq_ppi_times <-  fread(paste0(seqppi_res, 'all_times.txt'))
colnames(seq_ppi_times) <- c('Filename', 'Time [s]')
seq_ppi_times$Filename[grepl('richoux_regular', seq_ppi_times$Filename, fixed=TRUE)] <- gsub('richoux_regular', 'richoux-regular', seq_ppi_times$Filename[grepl('richoux_regular', seq_ppi_times$Filename, fixed=TRUE)])
seq_ppi_times$Filename[grepl('richoux_strict', seq_ppi_times$Filename, fixed=TRUE)] <- gsub('richoux_strict', 'richoux-strict', seq_ppi_times$Filename[grepl('richoux_strict', seq_ppi_times$Filename, fixed=TRUE)])
seq_ppi_times <- seq_ppi_times[, c('Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', fill=NA)]
seq_ppi_times <- seq_ppi_times[, Model := ifelse(is.na(Part_Train),
'PIPR',
paste('PIPR', Part_Train, Part_Test, sep='_'))]
all_times <- rbind(all_times, seq_ppi_times[, c('Test' ,'Model', 'Dataset', 'Time [s]')])
# SPRINT
sprint_times <- lapply(paste0(sprint_res, list.files(sprint_res, pattern = '*time*', recursive = TRUE)), function(x){
tmp <- fread(x, header=FALSE)
return(tmp[1,2])
})
sprint_times <- fread('../algorithms/SPRINT/results/run_t.csv')
all_times <- rbind(all_times, sprint_times[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
all_times$Dataset <- stringr::str_to_title(all_times$Dataset)
all_times <- all_times[, Dataset := factor(Dataset,
levels = c("Huang", "Guo", "Du", "Pan", "Richoux-Regular", "Richoux-Strict", "Richoux"))]
##### original
# training data size
sprint_data_dir <- '../algorithms/SPRINT/data/original/'
training_files <- list.files(path=sprint_data_dir, pattern = 'train_pos')
train_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- stringr::str_to_title(tstrsplit(training_files, '_', keep=1)[[1]])
#train_sizes <- prettyNum(train_sizes, big.mark = ',')
all_times_orig <- all_times[Test == 'original']
all_times_orig[, Model := gsub('RF_', 'RF-', Model)]
all_times_orig[, Model := gsub('SVM_', 'SVM-', Model)]
all_times_orig <- all_times_orig[, Model := factor(Model,
levels=c("RF-PCA","SVM-PCA", "RF-MDS", "SVM-MDS",
"RF-node2vec",  "SVM-node2vec", "SPRINT",
"Richoux-FC", "Richoux-LSTM",
"DeepFE", "PIPR"))]
all_times_orig[, n_train := train_sizes[as.character(Dataset)]]
# visualization
ggplot(all_times_orig, aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
scale_x_continuous(breaks = unique(all_times_orig$n_train),
labels = paste0(c('HUANG (', 'GUO (', 'DU (', 'PAN (', 'RICHOUX-REGULAR (', 'RICHOUX-STRICT ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(n.dodge = 2))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_hline(yintercept = 7200, color='red') +
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 7200, label = '2 h', vjust = -1, hjust=0), color='red') +
scale_color_manual(values = brewer.pal(12, "Paired")[-11])+
theme_bw()+
theme(text = element_text(size=20))
ggsave("./plots/all_times_original.pdf",height=4, width=12)
# without pipr
ggplot(all_times_orig[Model != "PIPR"], aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
scale_x_continuous(breaks = unique(all_times_orig$n_train),
labels = paste0(c('Huang (', 'Guo (', 'Du (', 'Pan (', 'Richoux Regular (', 'Richoux Strict ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(n.dodge = 2))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red')+
scale_color_manual(values = brewer.pal(12, "Paired")[-c(11, 12)])+
theme_bw()+
theme(text = element_text(size=20))
##### rewired
# training data size
sprint_data_dir <- '../algorithms/SPRINT/data/rewired/'
training_files <- list.files(path=sprint_data_dir, pattern = 'train_pos')
train_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- stringr::str_to_title(tstrsplit(training_files, '_', keep=1)[[1]])
#train_sizes <- prettyNum(train_sizes, big.mark = ',')
all_times_rew <- all_times[Test == 'rewired']
all_times_rew <- all_times_rew[, Model := factor(Model,
levels=c("RF_PCA","SVM_PCA", "RF_MDS", "SVM_MDS",
"RF_node2vec",  "SVM_node2vec", "SPRINT",
"DeepPPI_FC", "DeepPPI_LSTM",
"DeepFE", "PIPR"))]
all_times_rew[, n_train := train_sizes[as.character(Dataset)]]
ggplot(all_times_rew, aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
scale_x_continuous(breaks = unique(all_times_rew$n_train),
labels = paste0(c('Huang (', 'Guo (', 'Du (', 'Pan (', 'Richoux regular (', 'Richoux strict ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(n.dodge = 2))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_hline(yintercept = 7200, color='red') +
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 7200, label = '2 h', vjust = -1, hjust=0), color='red') +
scale_color_manual(values = brewer.pal(12, "Paired")[-11])+
theme_bw()+
theme(text = element_text(size=20))
ggsave("./all_times_rewired.pdf",height=8, width=12)
#### partitions
sprint_data_dir <- '../algorithms/SPRINT/data/partitions/'
training_files <- list.files(path=sprint_data_dir, pattern = 'pos')
partition_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
filenames <- tstrsplit(training_files, '_', keep=c(1,3))
names(partition_sizes) <- stringr::str_to_title(paste(filenames[[1]], filenames[[2]]))
all_times_part <- all_times[Test == 'partition']
all_times_part[, training_dataset := stringr::str_to_title(paste(Dataset, lapply(strsplit(all_times_part$Model, '_'), function(x) x[length(x)-1])))]
all_times_part[, n_train := partition_sizes[as.character(training_dataset)]]
ggplot(all_times_part, aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
labs(x = "Dataset (n training)", y = "Time [s]") +
scale_x_continuous(breaks = unique(all_times_part[, .(training_dataset, n_train)])$n_train,
labels = paste0(unique(all_times_part[, .(training_dataset, n_train)])$training_dataset,
rep(' (', 6),
unique(all_times_part[, .(training_dataset, n_train)])$n_train,
rep(')', 6)),
guide = guide_axis(n.dodge = 6))+
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red')+
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red')+
theme_bw()+
theme(text = element_text(size=10))
library(data.table)
library(ggplot2)
library(RColorBrewer)
#### result prefixes
custom_res <- '../algorithms/Custom/results/'
deepFE_res <- '../algorithms/DeepFE-PPI/result/custom/'
deepPPI_res <- '../algorithms/DeepPPI/keras/results_custom/'
seqppi_res <- '../algorithms/seq_ppi/binary/model/lasagna/results/'
sprint_res <- '../algorithms/SPRINT/results/'
#### time files
all_times <- data.table(Test = character(), Model=character(), Dataset=character(), `Time [s]`=numeric())
# custom
custom_times <- lapply(paste0(custom_res, list.files(custom_res, pattern='time*')), fread)
file_names <- tstrsplit(list.files(custom_res, pattern='time*'), '.txt', keep=1)[[1]]
file_names[grepl('richoux_regular', file_names, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', file_names[grepl('richoux_regular', file_names, fixed=TRUE)])
file_names[grepl('richoux_strict', file_names, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', file_names[grepl('richoux_strict', file_names, fixed=TRUE)])
file_names <- tstrsplit(file_names, '_', keep=c(2, 3, 4))
names(custom_times) <- paste(file_names[[1]], file_names[[2]], file_names[[3]], sep='_')
custom_times_df <- rbindlist(custom_times[!grepl('partition', names(custom_times), fixed=TRUE)], idcol = 'filename')
partition_times_df <- rbindlist(custom_times[grepl('partition', names(custom_times), fixed=TRUE)], idcol = 'filename')
custom_times_df <- custom_times_df[, c('test', 'dataset', 'encoding') := tstrsplit(filename, '_')]
partition_times_df <- partition_times_df[, c('test', 'dataset', 'encoding') := tstrsplit(filename, '_')]
names(custom_times_df) <- c('Filename', 'Algorithm', 'Time [s]', 'Test', 'Dataset', 'Encoding')
names(partition_times_df) <- c('Filename', 'Part_Train', 'Part_Test', 'Algorithm', 'Time [s]', 'Test', 'Dataset', 'Encoding')
custom_times_df$Part_Train <- NA
custom_times_df$Part_Test <- NA
custom_times_df[, Model := paste(Algorithm, Encoding, sep='_')]
partition_times_df[, Model := paste(Algorithm, Encoding, Part_Train, Part_Test, sep='_')]
all_times_custom <- rbind(custom_times_df, partition_times_df)
fwrite(all_times_custom, '../algorithms/Custom/results/run_t.csv')
all_times <- rbind(all_times, all_times_custom[, c('Test', 'Model', 'Dataset','Time [s]')])
# deepFE
deepFE_times <- lapply(paste0(deepFE_res, list.files(deepFE_res, pattern = 'time*', recursive = TRUE)), fread)
file_names <- tstrsplit(basename(list.files(deepFE_res, pattern = 'time*', recursive = TRUE)), '.txt', keep=1)[[1]]
file_names[grepl('richoux_regular', file_names, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', file_names[grepl('richoux_regular', file_names, fixed=TRUE)])
file_names[grepl('richoux_strict', file_names, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', file_names[grepl('richoux_strict', file_names, fixed=TRUE)])
names(deepFE_times) <- file_names
deepFE_times <- rbindlist(deepFE_times, idcol='Filename')
deepFE_times <- deepFE_times[, c('Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', keep=c(2,3,4,5), fill = NA)]
deepFE_times <- deepFE_times[, Model := ifelse(is.na(Part_Train),
'DeepFE',
paste('DeepFE', Part_Train, Part_Test, sep='_'))]
colnames(deepFE_times) <-c('Filename', 'Time [s]', 'Test', 'Dataset', 'Part_Train', 'Part_Test', 'Model')
fwrite(deepFE_times, '../algorithms/DeepFE-PPI/result/custom/run_t.csv')
all_times <- rbind(all_times, deepFE_times[, c('Test', 'Model', 'Dataset', 'Time [s]')])
# deepPPI
deepPPI_times <- fread(paste0(deepPPI_res, 'all_times.txt'))
colnames(deepPPI_times) <- c('Filename', 'Time [s]')
deepPPI_times$Filename[grepl('richoux_regular', deepPPI_times$Filename, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', deepPPI_times$Filename[grepl('richoux_regular', deepPPI_times$Filename, fixed=TRUE)])
deepPPI_times$Filename[grepl('richoux_strict', deepPPI_times$Filename, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', deepPPI_times$Filename[grepl('richoux_strict', deepPPI_times$Filename, fixed=TRUE)])
deepPPI_times <- deepPPI_times[, c('Model', 'Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', fill=NA)]
deepPPI_times <- deepPPI_times[, Part_Train := tstrsplit(Part_Train, 'tr', keep = 2)]
deepPPI_times <- deepPPI_times[, Part_Test := tstrsplit(Part_Test, 'te', keep = 2)]
deepPPI_times <- deepPPI_times[, Model := ifelse(is.na(Part_Train),
paste0('Richoux-', Model),
paste('Richoux', Model, Part_Train, Part_Test, sep='-'))]
all_times <- rbind(all_times, deepPPI_times[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
# seq_ppi
seq_ppi_times <-  fread(paste0(seqppi_res, 'all_times.txt'))
colnames(seq_ppi_times) <- c('Filename', 'Time [s]')
seq_ppi_times$Filename[grepl('richoux_regular', seq_ppi_times$Filename, fixed=TRUE)] <- gsub('richoux_regular', 'richoux-regular', seq_ppi_times$Filename[grepl('richoux_regular', seq_ppi_times$Filename, fixed=TRUE)])
seq_ppi_times$Filename[grepl('richoux_strict', seq_ppi_times$Filename, fixed=TRUE)] <- gsub('richoux_strict', 'richoux-strict', seq_ppi_times$Filename[grepl('richoux_strict', seq_ppi_times$Filename, fixed=TRUE)])
seq_ppi_times <- seq_ppi_times[, c('Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', fill=NA)]
seq_ppi_times <- seq_ppi_times[, Model := ifelse(is.na(Part_Train),
'PIPR',
paste('PIPR', Part_Train, Part_Test, sep='_'))]
all_times <- rbind(all_times, seq_ppi_times[, c('Test' ,'Model', 'Dataset', 'Time [s]')])
# SPRINT
sprint_times <- lapply(paste0(sprint_res, list.files(sprint_res, pattern = '*time*', recursive = TRUE)), function(x){
tmp <- fread(x, header=FALSE)
return(tmp[1,2])
})
sprint_times <- fread('../algorithms/SPRINT/results/run_t.csv')
all_times <- rbind(all_times, sprint_times[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
all_times$Dataset <- stringr::str_to_title(all_times$Dataset)
all_times <- all_times[, Dataset := factor(Dataset,
levels = c("Huang", "Guo", "Du", "Pan", "Richoux-Regular", "Richoux-Strict", "Richoux"))]
##### original
# training data size
sprint_data_dir <- '../algorithms/SPRINT/data/original/'
training_files <- list.files(path=sprint_data_dir, pattern = 'train_pos')
train_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- stringr::str_to_title(tstrsplit(training_files, '_', keep=1)[[1]])
#train_sizes <- prettyNum(train_sizes, big.mark = ',')
all_times_orig <- all_times[Test == 'original']
all_times_orig[, Model := gsub('RF_', 'RF-', Model)]
all_times_orig[, Model := gsub('SVM_', 'SVM-', Model)]
all_times_orig <- all_times_orig[, Model := factor(Model,
levels=c("RF-PCA","SVM-PCA", "RF-MDS", "SVM-MDS",
"RF-node2vec",  "SVM-node2vec", "SPRINT",
"Richoux-FC", "Richoux-LSTM",
"DeepFE", "PIPR"))]
all_times_orig[, n_train := train_sizes[as.character(Dataset)]]
# visualization
ggplot(all_times_orig, aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
scale_x_continuous(breaks = unique(all_times_orig$n_train),
labels = paste0(c('HUANG (', 'GUO (', 'DU (', 'PAN (', 'RICHOUX-REGULAR (', 'RICHOUX-STRICT ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(n.dodge = 2))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_hline(yintercept = 7200, color='red') +
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 7200, label = '2 h', vjust = -1, hjust=0), color='red') +
scale_color_manual(values = brewer.pal(12, "Paired")[-11])+
theme_bw()+
theme(text = element_text(size=20))
ggsave("./plots/all_times_original.pdf",height=4, width=12)
# without pipr
ggplot(all_times_orig[Model != "PIPR"], aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
scale_x_continuous(breaks = unique(all_times_orig$n_train),
labels = paste0(c('Huang (', 'Guo (', 'Du (', 'Pan (', 'Richoux Regular (', 'Richoux Strict ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(n.dodge = 2))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red')+
scale_color_manual(values = brewer.pal(12, "Paired")[-c(11, 12)])+
theme_bw()+
theme(text = element_text(size=20))
##### rewired
# training data size
sprint_data_dir <- '../algorithms/SPRINT/data/rewired/'
training_files <- list.files(path=sprint_data_dir, pattern = 'train_pos')
train_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- stringr::str_to_title(tstrsplit(training_files, '_', keep=1)[[1]])
#train_sizes <- prettyNum(train_sizes, big.mark = ',')
all_times_rew <- all_times[Test == 'rewired']
all_times_rew <- all_times_rew[, Model := factor(Model,
levels=c("RF_PCA","SVM_PCA", "RF_MDS", "SVM_MDS",
"RF_node2vec",  "SVM_node2vec", "SPRINT",
"DeepPPI_FC", "DeepPPI_LSTM",
"DeepFE", "PIPR"))]
all_times_rew[, n_train := train_sizes[as.character(Dataset)]]
ggplot(all_times_rew, aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
scale_x_continuous(breaks = unique(all_times_rew$n_train),
labels = paste0(c('Huang (', 'Guo (', 'Du (', 'Pan (', 'Richoux regular (', 'Richoux strict ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(n.dodge = 2))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_hline(yintercept = 7200, color='red') +
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 7200, label = '2 h', vjust = -1, hjust=0), color='red') +
scale_color_manual(values = brewer.pal(12, "Paired")[-11])+
theme_bw()+
theme(text = element_text(size=20))
ggsave("./plots/all_times_rewired.pdf",height=8, width=12)
#### partitions
sprint_data_dir <- '../algorithms/SPRINT/data/partitions/'
training_files <- list.files(path=sprint_data_dir, pattern = 'pos')
partition_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
filenames <- tstrsplit(training_files, '_', keep=c(1,3))
names(partition_sizes) <- stringr::str_to_title(paste(filenames[[1]], filenames[[2]]))
all_times_part <- all_times[Test == 'partition']
all_times_part[, training_dataset := stringr::str_to_title(paste(Dataset, lapply(strsplit(all_times_part$Model, '_'), function(x) x[length(x)-1])))]
all_times_part[, n_train := partition_sizes[as.character(training_dataset)]]
ggplot(all_times_part, aes(x=n_train, y = `Time [s]`, color = Model, group=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.5)+
labs(x = "Dataset (n training)", y = "Time [s]") +
scale_x_continuous(breaks = unique(all_times_part[, .(training_dataset, n_train)])$n_train,
labels = paste0(unique(all_times_part[, .(training_dataset, n_train)])$training_dataset,
rep(' (', 6),
unique(all_times_part[, .(training_dataset, n_train)])$n_train,
rep(')', 6)),
guide = guide_axis(n.dodge = 6))+
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red')+
geom_text(aes(0, 1800, label = '30 min', vjust = -1, hjust=0), color='red') +
geom_text(aes(0, 3600, label = '1 h', vjust = -1, hjust=0), color='red')+
theme_bw()+
theme(text = element_text(size=10))
library(data.table)
library(ggplot2)
library(latex2exp)
sprint_dir <- '../algorithms/SPRINT/results/'
original_results <- lapply(list.files(paste0(sprint_dir, 'original/'),
pattern = '(du|guo|huang|pan|richoux_regular|richoux_strict)_results.txt$',
full.names = TRUE
), fread)
names(original_results) <- tstrsplit(list.files(paste0(sprint_dir, 'original/'),
pattern = '(du|guo|huang|pan|richoux_regular|richoux_strict)_results.txt$'),
'_results', keep=1)[[1]]
original_results <- rbindlist(original_results, idcol = 'dataset')
original_results$test <- 'Original'
rewired_results <- lapply(list.files(paste0(sprint_dir, 'rewired/'),
pattern = '(du|guo|huang|pan|richoux_regular|richoux_strict)_results.txt$',
full.names = TRUE
), fread)
names(rewired_results) <- tstrsplit(list.files(paste0(sprint_dir, 'rewired/'),
pattern = '(du|guo|huang|pan|richoux_regular|richoux_strict)_results.txt$'),
'_results', keep=1)[[1]]
rewired_results <- rbindlist(rewired_results, idcol = 'dataset')
rewired_results$test <- 'Rewired'
all_results <- rbind(original_results, rewired_results)
colnames(all_results) <- c('Dataset', 'Score', 'True Label', 'Test')
all_results$`True Label` <- as.factor(all_results$`True Label`)
partition_results <- lapply(list.files(paste0(sprint_dir, 'partitions/'),
pattern = '(du|guo|huang|pan|richoux)_train_(0|both)_test_(0|1).txt$',
full.names = TRUE), fread)
names(partition_results) <- tstrsplit(list.files(paste0(sprint_dir, 'partitions/'),
pattern = '(du|guo|huang|pan|richoux)_train_(0|both)_test_(0|1).txt$'),
'.txt', keep=1)[[1]]
partition_results <- rbindlist(partition_results, idcol = 'dataset')
partition_results[, test := tstrsplit(dataset, '(du|guo|huang|pan|richoux)_', keep=2)]
partition_results[, dataset := tstrsplit(dataset, '_', keep=1)]
partition_results$test <- gsub('train_both_', 'Inter->', partition_results$test)
partition_results$test <- gsub('train_0_', 'Intra-0->', partition_results$test)
partition_results$test <- gsub('test_0', 'Intra-0', partition_results$test)
partition_results$test <- gsub('test_1', 'Intra-1', partition_results$test)
colnames(partition_results) <- c('Dataset', 'Score', 'True Label', 'Test')
all_results <- rbind(all_results, partition_results)
all_results$Test <- factor(all_results$Test, levels=c('Original', 'Rewired', 'Inter->Intra-1', 'Inter->Intra-0', 'Intra-0->Intra-1'))
all_results[, Dataset := gsub('richoux_regular', 'richoux-regular', Dataset)]
all_results[, Dataset := gsub('richoux_strict', 'richoux-strict', Dataset)]
all_results[, Dataset := stringr::str_to_upper(Dataset)]
all_results$Dataset <- factor(all_results$Dataset,
levels = c('HUANG', 'GUO', 'DU', 'RICHOUX', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT'))
ggplot(all_results, aes(x = Test, y = log(Score), fill = `True Label`))+
geom_boxplot()+
facet_wrap(~Dataset)+
theme_bw()+
theme(text = element_text(size=15),axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))+
scale_x_discrete(labels = c(
'Original' = 'Original',
'Rewired' = 'Rewired',
'Inter->Intra-1' = TeX('$\\it{INTER} \\rightarrow \\it{INTRA}_1$'),
'Inter->Intra-0' = TeX('$\\it{INTER} \\rightarrow \\it{INTRA}_0$'),
'Intra-0->Intra-1' = TeX('$\\it{INTRA}_0 \\rightarrow \\it{INTRA}_1$')
))
ggsave('plots/sprint_scores.pdf', height=8, width=10)
