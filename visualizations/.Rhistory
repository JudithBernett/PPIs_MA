main.pos = c(0.5, 1),
main.fontfamily = "sans",
cat.cex = 1.5,
cat.default.pos = "outer",
cat.pos = c(320, 40, 180),
cat.fontfamily = "sans",
rotation = 1)
plot_list <- append(plot_list, setNames(list(venn_plot), 'dscript'))
all_sets <- lapply(list.files(path='../Datasets_PPIs/Hippiev2.3', full.names = T, pattern = '^Intra(0|1|2)_(pos|neg)_rr.txt'),
fread, header=F)
names(all_sets) <- tstrsplit(list.files(path='../Datasets_PPIs/Hippiev2.3', pattern = '^Intra(0|1|2)_(pos|neg)_rr.txt'), '_rr', keep=1)[[1]]
all_sets <- lapply(all_sets, function(x){
return(unique(melt(x, measure.vars = c('V1', 'V2'), value.name = 'Protein')[, -'variable']))
})
all_sets <- rbindlist(all_sets, idcol='filename')
all_sets[, dataset := tstrsplit(filename, '_', keep = 1)]
p_0 <- unique(all_sets[dataset == 'Intra0', Protein])
p_1 <- unique(all_sets[dataset == 'Intra1', Protein])
p_2 <- unique(all_sets[dataset == 'Intra2', Protein])
venn_plot <- venn.diagram(x = list(p_0, p_1, p_2),
category.names = TeX(c('$\\it{INTRA}_0$', '$\\it{INTRA}_1$', '$\\it{INTRA}_2$')),
main = 'GOLD STANDARD',
filename = NULL,
disable.logging = TRUE,
# Output features
imagetype="png" ,
height = 3,
width = 3,
units = 'cm',
resolution = 600,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = myCol,
# Numbers
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
# Set names
main.cex = 1.5,
main.pos = c(0.5, 1.5),
main.fontfamily = "sans",
cat.cex = 1.5,
cat.default.pos = "outer",
cat.pos = c(0, 0, 0),
cat.fontfamily = "sans",
rotation = 1)
#plot_list <- append(plot_list, setNames(list(venn_plot), 'gold'))
g <- arrangeGrob(gTree(children=plot_list[['huang']]),
gTree(children=plot_list[['guo']]),
gTree(children=plot_list[['du']]),
gTree(children=plot_list[['pan']]),
gTree(children=plot_list[['richoux-uniprot']]),
gTree(children=plot_list[['dscript']]),
ncol =2)
ggsave('~/Downloads/venn_overlaps_partitions.png', g, height = 12, width = 11)
library(data.table)
library(ggplot2)
library(RColorBrewer)
#### result prefixes
custom_res <- '../algorithms/Custom/results/'
deepFE_res <- '../algorithms/DeepFE-PPI/result/custom/'
deepPPI_res <- '../algorithms/DeepPPI/keras/results_custom/'
seqppi_res <- '../algorithms/seq_ppi/binary/model/lasagna/results/'
sprint_res <- '../algorithms/SPRINT/results/'
dscript_res <- '../algorithms/D-SCRIPT-main/results_dscript/'
tt_res <- '../algorithms/D-SCRIPT-main/results_topsyturvy/'
#### time files
all_times <- data.table(Test = character(), Model=character(), Dataset=character(), `Time [s]`=numeric())
# custom
custom_times <- lapply(paste0(custom_res, list.files(custom_res, pattern='time*')), fread)
file_names <- tstrsplit(list.files(custom_res, pattern='time*'), '.txt', keep=1)[[1]]
file_names[grepl('richoux_regular', file_names, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', file_names[grepl('richoux_regular', file_names, fixed=TRUE)])
file_names[grepl('richoux_strict', file_names, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', file_names[grepl('richoux_strict', file_names, fixed=TRUE)])
file_names <- tstrsplit(file_names, '_', keep=c(2, 3, 4))
names(custom_times) <- paste(file_names[[1]], file_names[[2]], file_names[[3]], sep='_')
custom_times_df <- rbindlist(custom_times[!grepl('partition|deg', names(custom_times))], idcol = 'filename')
partition_times_df <- rbindlist(custom_times[grepl('partition_(dscript|du|guo|huang|pan|richoux)', names(custom_times))], idcol = 'filename')
custom_times_df <- custom_times_df[, c('test', 'dataset', 'encoding') := tstrsplit(filename, '_')]
partition_times_df <- partition_times_df[, c('test', 'dataset', 'encoding') := tstrsplit(filename, '_')]
names(custom_times_df) <- c('Filename', 'Algorithm', 'Time [s]', 'Test', 'Dataset', 'Encoding')
names(partition_times_df) <- c('Filename', 'Part_Train', 'Part_Test', 'Algorithm', 'Time [s]', 'Test', 'Dataset', 'Encoding')
custom_times_df$Part_Train <- NA
custom_times_df$Part_Test <- NA
custom_times_df[, Model := paste(Algorithm, Encoding, sep='_')]
partition_times_df[, Model := paste(Algorithm, Encoding, Part_Train, Part_Test, sep='_')]
all_times_custom <- rbind(custom_times_df, partition_times_df)
deg_times_df <- rbindlist(custom_times[grepl('deg', names(custom_times))], idcol = 'filename')
colnames(deg_times_df) <- c('Filename', 'Dataset', 'Algorithm', 'Time [s]')
deg_times_df[, Test := tstrsplit(Filename, '_', keep=1)]
deg_times_df$Encoding <- NA
deg_times_df[Dataset == 'gold_standard', Dataset := 'gold']
deg_times_df[Dataset == 'richoux_regular', Dataset := 'Richoux-Regular']
deg_times_df[Dataset == 'richoux_strict', Dataset := 'Richoux-Strict']
deg_times_df[, c('Dataset','Part_Train', 'Part_Test') := tstrsplit(Dataset, '_')]
deg_times_df[, Model := Algorithm]
all_times_custom <- rbind(all_times_custom, deg_times_df)
fwrite(all_times_custom, '../algorithms/Custom/results/run_t.csv')
all_times <- rbind(all_times, all_times_custom[, c('Test', 'Model', 'Dataset','Time [s]')])
# deepFE
deepFE_times <- lapply(paste0(deepFE_res, list.files(deepFE_res, pattern = 'time*', recursive = TRUE)), fread)
file_names <- tstrsplit(basename(list.files(deepFE_res, pattern = 'time*', recursive = TRUE)), '.txt', keep=1)[[1]]
file_names[grepl('richoux_regular', file_names, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', file_names[grepl('richoux_regular', file_names, fixed=TRUE)])
file_names[grepl('richoux_strict', file_names, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', file_names[grepl('richoux_strict', file_names, fixed=TRUE)])
names(deepFE_times) <- file_names
deepFE_times <- rbindlist(deepFE_times, idcol='Filename')
deepFE_times <- deepFE_times[, c('Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', keep=c(2,3,4,5), fill = NA)]
deepFE_times <- deepFE_times[, Model := ifelse(is.na(Part_Train),
'DeepFE',
paste('DeepFE', Part_Train, Part_Test, sep='_'))]
colnames(deepFE_times) <-c('Filename', 'Time [s]', 'Test', 'Dataset', 'Part_Train', 'Part_Test', 'Model')
fwrite(deepFE_times, '../algorithms/DeepFE-PPI/result/custom/run_t.csv')
all_times <- rbind(all_times, deepFE_times[, c('Test', 'Model', 'Dataset', 'Time [s]')])
# deepPPI
deepPPI_times <- fread(paste0(deepPPI_res, 'all_times.txt'))
colnames(deepPPI_times) <- c('Filename', 'Time [s]')
deepPPI_times$Filename[grepl('richoux_regular', deepPPI_times$Filename, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', deepPPI_times$Filename[grepl('richoux_regular', deepPPI_times$Filename, fixed=TRUE)])
deepPPI_times$Filename[grepl('richoux_strict', deepPPI_times$Filename, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', deepPPI_times$Filename[grepl('richoux_strict', deepPPI_times$Filename, fixed=TRUE)])
deepPPI_times <- deepPPI_times[, c('Model', 'Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', fill=NA)]
deepPPI_times <- deepPPI_times[, Part_Train := tstrsplit(Part_Train, 'tr', keep = 2)]
deepPPI_times <- deepPPI_times[, Part_Test := tstrsplit(Part_Test, 'te', keep = 2)]
deepPPI_times <- deepPPI_times[, Model := ifelse(is.na(Part_Train),
paste0('Richoux-', Model),
paste('Richoux', Model, Part_Train, Part_Test, sep='-'))]
all_times <- rbind(all_times, deepPPI_times[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
# seq_ppi
seq_ppi_times <-  fread(paste0(seqppi_res, 'all_times.txt'))
colnames(seq_ppi_times) <- c('Filename', 'Time [s]')
seq_ppi_times$Filename[grepl('richoux_regular', seq_ppi_times$Filename, fixed=TRUE)] <- gsub('richoux_regular', 'richoux-regular', seq_ppi_times$Filename[grepl('richoux_regular', seq_ppi_times$Filename, fixed=TRUE)])
seq_ppi_times$Filename[grepl('richoux_strict', seq_ppi_times$Filename, fixed=TRUE)] <- gsub('richoux_strict', 'richoux-strict', seq_ppi_times$Filename[grepl('richoux_strict', seq_ppi_times$Filename, fixed=TRUE)])
seq_ppi_times <- seq_ppi_times[, c('Test', 'Dataset', 'Part_Train', 'Part_Test') := tstrsplit(Filename, '_', fill=NA)]
seq_ppi_times <- seq_ppi_times[, Model := ifelse(is.na(Part_Train),
'PIPR',
paste('PIPR', Part_Train, Part_Test, sep='_'))]
all_times <- rbind(all_times, seq_ppi_times[, c('Test' ,'Model', 'Dataset', 'Time [s]')])
# SPRINT
sprint_times <- lapply(paste0(sprint_res, list.files(sprint_res, pattern = '*time*', recursive = TRUE)), function(x){
tmp <- fread(x, header=FALSE, sep='\t')
# Input string
time_string <- tmp[1,2]
time_string <- gsub('s', '', time_string)
time_string <- gsub(',', '.', time_string)
# Split minutes and seconds
time_parts <- tstrsplit(time_string, 'm')
# Convert minutes and seconds to numeric
minutes <- as.numeric(time_parts[1])
seconds <- as.numeric(time_parts[2])
# Calculate total seconds
total_seconds <- (minutes * 60) + seconds
return(data.table('Time [s]' = total_seconds))
})
filenames <- list.files(sprint_res, pattern = '*time*', recursive = TRUE)
test <- tstrsplit(filenames, '/', keep=1)[[1]]
filenames[grepl('richoux_regular', filenames, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', filenames[grepl('richoux_regular', filenames, fixed=TRUE)])
filenames[grepl('richoux_strict', filenames, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', filenames[grepl('richoux_strict', filenames, fixed=TRUE)])
dataset <- tstrsplit(tstrsplit(filenames, '_time', keep=1)[[1]], '/', keep=2)[[1]]
names(sprint_times) <- paste(test, dataset, sep='.')
sprint_df <- rbindlist(sprint_times, idcol='filename')
sprint_df[, c("Test", "Rest") := tstrsplit(filename, '\\.')]
sprint_df <- sprint_df[, Rest := gsub('(train_|test_)', '', Rest)]
sprint_df <- sprint_df[, Rest := gsub('gold_standard', 'gold', Rest)]
sprint_df[, c("Dataset", "Part_Train", "Part_Test") := tstrsplit(Rest, '_')]
sprint_df[, Model := 'SPRINT']
fwrite(sprint_df, '../algorithms/SPRINT/results/run_t.csv')
all_times <- rbind(all_times, sprint_df[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
#D-SCRIPT
extract_dscript_time <- function(directory) {
time_files <- paste0(directory, list.files(directory, pattern = '*time\\.txt', recursive = TRUE))
time_files <- grep('train_', time_files, invert = TRUE, value = TRUE)
times <- lapply(time_files, function(x){
tmp <- fread(x, header=FALSE, sep='\t')
# Input string
time_string <- tmp[1,2]
time_string <- gsub('s', '', time_string)
time_string <- gsub(',', '.', time_string)
# Split minutes and seconds
time_parts <- tstrsplit(time_string, 'm')
# Convert minutes and seconds to numeric
minutes <- as.numeric(time_parts[1])
seconds <- as.numeric(time_parts[2])
# Calculate total seconds
total_seconds <- (minutes * 60) + seconds
return(data.table('Time [s]' = total_seconds))
})
filenames <- list.files(directory, pattern = '*time\\.txt', recursive = TRUE)
filenames <- grep('train_', filenames, invert = TRUE, value = TRUE)
test <- tstrsplit(filenames, '/', keep=1)[[1]]
filenames[grepl('richoux_regular', filenames, fixed=TRUE)] <- gsub('richoux_regular', 'Richoux-Regular', filenames[grepl('richoux_regular', filenames, fixed=TRUE)])
filenames[grepl('richoux_strict', filenames, fixed=TRUE)] <- gsub('richoux_strict', 'Richoux-Strict', filenames[grepl('richoux_strict', filenames, fixed=TRUE)])
dataset <- tstrsplit(tstrsplit(filenames, '_time', keep=1)[[1]], '/', keep=2)[[1]]
names(times) <- paste(test, dataset, sep='.')
df <- rbindlist(times, idcol='filename')
df[, c("Test", "Rest") := tstrsplit(filename, '\\.')]
df <- df[, Rest := gsub('(train_|test_)', '', Rest)]
df[, c("Dataset", "Part_Train", "Part_Test") := tstrsplit(Rest, '_')]
return(df)
}
dscript_df <- extract_dscript_time(dscript_res)
dscript_df[, Model := 'D-SCRIPT']
all_times <- rbind(all_times, dscript_df[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
# Topsy-Turvy
tt_df <- extract_dscript_time(tt_res)
tt_df[, Model := 'Topsy-Turvy']
all_times <- rbind(all_times, tt_df[,  c('Test', 'Model', 'Dataset', 'Time [s]')])
all_times$Dataset <- stringr::str_to_title(all_times$Dataset)
all_times <- all_times[, Dataset := factor(Dataset,
levels = c("Huang", "Guo", "Du", "Pan", "Richoux-Regular", "Richoux-Strict", "Richoux", "Dscript"))]
##### original
# training data size
sprint_data_dir <- '../algorithms/SPRINT/data/original/'
training_files_pos <- list.files(path=sprint_data_dir, pattern = 'train_pos')
training_files_neg <- list.files(path=sprint_data_dir, pattern = 'train_neg')
train_sizes_pos <- sapply(paste0(sprint_data_dir, training_files_pos), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
train_sizes_neg <- sapply(paste0(sprint_data_dir, training_files_neg), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
train_sizes <- train_sizes_pos + train_sizes_neg
training_files_pos[grepl('richoux', training_files_pos, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files_pos[grepl('richoux', training_files_pos, fixed=TRUE)])
names(train_sizes) <- stringr::str_to_title(tstrsplit(training_files_pos, '_', keep=1)[[1]])
#train_sizes <- prettyNum(train_sizes, big.mark = ',')
all_times_orig <- all_times[Test == 'original']
all_times_orig[, Model := gsub('RF_', 'RF-', Model)]
all_times_orig[, Model := gsub('SVM_', 'SVM-', Model)]
all_times_orig <- all_times_orig[, Model := factor(Model,
levels=c("RF-PCA","SVM-PCA", "RF-MDS", "SVM-MDS",
"RF-node2vec",  "SVM-node2vec", "Harmonic Function",
"Local and Global Consistency", "SPRINT",
"Richoux-FC", "Richoux-LSTM",
"DeepFE", "PIPR", "D-SCRIPT", "Topsy-Turvy"))]
all_times_orig[, n_train := train_sizes[as.character(Dataset)]]
all_times_orig <- all_times_orig[!is.na(n_train), ]
# visualization
colors <- c('#e6194b', '#f032e6', '#ffe119', '#4363d8', '#f58231', '#911eb4',
'#3cb44b','#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324',
'#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075')
ggplot(all_times_orig[!is.na(Dataset)], aes(x=n_train, y = `Time [s]`, color = Model, group=Model, shape=Model))+
geom_point(size=3)+
geom_line(size=2, alpha=0.7)+
scale_x_continuous(breaks = unique(all_times_orig$n_train),
labels = paste0(c('D-SCRIPT UNBALANCED (', 'DU (', 'GUO (', 'HUANG (', 'PAN (', 'RICHOUX-REGULAR (', 'RICHOUX-STRICT ('),
unique(all_times_orig$n_train), rep(')', 6)),
guide = guide_axis(check.overlap = T),
trans = 'log10',
limits = c(min(unique(all_times_orig$n_train)), max(unique(all_times_orig$n_train))))+
labs(x = "Dataset (n training)", y = "Time [s]") +
geom_hline(yintercept = 1800, color='red') +
geom_hline(yintercept = 3600, color='red') +
geom_hline(yintercept = 36000, color='red') +
geom_hline(yintercept = 86400, color='red') +
geom_text(aes(min(unique(all_times_orig$n_train)), 1800, label = '30 min', vjust = -1, hjust=0), color='red', check_overlap = T) +
geom_text(aes(min(unique(all_times_orig$n_train)), 3600, label = '1 h', vjust = -1, hjust=0), color='red', check_overlap = T) +
geom_text(aes(min(unique(all_times_orig$n_train)), 36000, label = '10 h', vjust = -1, hjust=0), color='red', check_overlap = T) +
geom_text(aes(min(unique(all_times_orig$n_train)), 86400, label = '24 h', vjust = -1, hjust=0), color='red', check_overlap = T) +
scale_y_continuous(trans='log10')+
scale_color_manual(values = colors)+
scale_shape_manual(values = c(0, 15, 1, 16, 2, 3, 4, 17, 5, 6, 18, 7, 8, 19, 9))+
theme_bw()+
theme(text = element_text(size=15), axis.text.x = element_text(angle = 15, hjust=1))
ggsave("~/Downloads/all_times_original.png",height=6, width=12)
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(latex2exp)
measure <- 'Accuracy'
original_results <- fread(paste0('results/original_', measure, '.csv'))
gold_standard_results <- fread(paste0('results/gold_standard_', measure, '.csv'))
original_results <- rbind(original_results, gold_standard_results)
original_results$Test <- 'Original'
rewired_results <- fread(paste0('results/rewired_', measure, '.csv'))
rewired_results$Test <- 'Rewired'
partition_results <- fread(paste0('results/partition_', measure, '.csv'))
colnames(partition_results) <- c('Model', 'Dataset', measure, 'Test')
all_results <- rbind(original_results, rewired_results)
all_results <- all_results[, Model := factor(Model,
levels=c('SPRINT',
'deepPPI_FC', 'deepPPI_LSTM',
'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy_Turvy',
'RF_PCA','SVM_PCA', 'RF_MDS', 'SVM_MDS',
'RF_node2vec',  'SVM_node2vec', 'degree_hf', 'degree_cons'))]
all_results <- all_results[, Dataset := factor(Dataset,
levels = c('gold_standard', 'huang', 'guo', 'du', 'pan', 'richoux-regular', 'richoux-strict', 'dscript'))]
all_results <- rbind(all_results, partition_results)
all_results[, Test := factor(Test, levels=c('Original', 'Rewired', 'both->0', 'both->1', '0->1'))]
all_results[, Model := gsub('deepPPI_FC', 'Richoux-FC', Model)]
all_results[, Model := gsub('deepPPI_LSTM', 'Richoux-LSTM', Model)]
all_results[, Model := gsub('RF_PCA', 'RF PCA', Model)]
all_results[, Model := gsub('SVM_PCA', 'SVM PCA', Model)]
all_results[, Model := gsub('RF_MDS', 'RF MDS', Model)]
all_results[, Model := gsub('SVM_MDS', 'SVM MDS', Model)]
all_results[, Model := gsub('RF_node2vec', 'RF node2vec', Model)]
all_results[, Model := gsub('SVM_node2vec', 'SVM node2vec', Model)]
all_results[, Model := gsub('degree_hf', 'Harmonic Function', Model)]
all_results[, Model := gsub('degree_cons', 'Global and Local Consistency', Model)]
all_results[, Model := gsub('Topsy_Turvy', 'Topsy Turvy', Model)]
all_results <- all_results[, Model := factor(Model,
levels=c('SPRINT',
'Richoux-FC', 'Richoux-LSTM',
'DeepFE', 'PIPR', 'D-SCRIPT', 'Topsy Turvy', 'RF PCA','SVM PCA', 'RF MDS', 'SVM MDS',
'RF node2vec',  'SVM node2vec', 'Harmonic Function', 'Global and Local Consistency'))]
colorBlindBlack8  <- c('#000000', '#E69F00', '#56B4E9', '#009E73',
'#F0E442', '#0072B2', '#D55E00', '#CC79A7')
result_mat <- as.matrix(dcast(all_results, Model ~ Dataset + Test, value.var = measure))
rownames(result_mat) <- result_mat[, 'Model']
result_mat <- result_mat[, -1]
class(result_mat) <- 'numeric'
colnames(result_mat)[colnames(result_mat) == 'gold_standard_Original'] <- 'Gold_Original'
annotation_col <- as.data.frame(tstrsplit(colnames(result_mat), '_', keep = 2), col.names = c('Test'))
rownames(annotation_col) <- colnames(result_mat)
annotation_col$Test <- gsub('both', 'Inter' ,annotation_col$Test)
annotation_col$Test <- gsub('0', 'Intra-0' ,annotation_col$Test)
annotation_col$Test <- gsub('1', 'Intra-1' ,annotation_col$Test)
annotation_col$Test <- factor(annotation_col$Test,
levels = c('Original', 'Rewired', 'Inter->Intra-0', 'Inter->Intra-1', 'Intra-0->Intra-1'))
annotation_col$Dataset <- tstrsplit(colnames(result_mat), '_', keep = 1)[[1]]
annotation_col$Dataset <- factor(annotation_col$Dataset,
levels = c('Gold', 'huang', 'guo', 'du', 'pan', 'richoux-regular', 'richoux-strict', 'richoux', 'dscript'))
annotation_col <- annotation_col[order(annotation_col$Test, annotation_col$Dataset), , drop = FALSE]
annotation_col$Dataset <- NULL
result_mat <- result_mat[, rownames(annotation_col)]
# training data sizes
get_sizes <- function(directory) {
sprint_data_dir <- paste0('../algorithms/SPRINT/data/', directory, '/')
training_files_pos <- list.files(path=sprint_data_dir, pattern = 'train_pos')
training_files_neg <- list.files(path=sprint_data_dir, pattern = 'train_neg')
train_sizes_pos <- sapply(paste0(sprint_data_dir, training_files_pos), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
train_sizes_neg <- sapply(paste0(sprint_data_dir, training_files_neg), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
train_sizes <- train_sizes_pos + train_sizes_neg
training_files_pos[grepl('richoux', training_files_pos, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files_pos[grepl('richoux', training_files_pos, fixed=TRUE)])
names(train_sizes) <- tstrsplit(training_files_pos, '_', keep=1)[[1]]
train_sizes <- prettyNum(train_sizes, big.mark = ',')
return(train_sizes)
}
original_sizes <- get_sizes('original')
original_sizes <- c(original_sizes, c('gold' = prettyNum(as.integer(system2("wc",
args = c("-l", '../Datasets_PPIs/Hippiev2.3/Intra0_Intra1_pos_rr.txt',
" | awk '{print $1}'"),
stdout = TRUE)) * 2, big.mark = ',')))
rewired_sizes <- get_sizes('rewired')
sprint_data_dir <- '../algorithms/SPRINT/data/partitions/'
training_files <- list.files(path=sprint_data_dir, pattern = 'pos')
partition_sizes <- sapply(paste0(sprint_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE)) * 2
}
)
filenames <- tstrsplit(training_files, '_', keep=c(1,3))
names(partition_sizes) <- paste(filenames[[1]], filenames[[2]])
partition_sizes <- prettyNum(partition_sizes, big.mark = ',')
get_sizes_dscript <- function(directory) {
dscript_data_dir <- paste0('../algorithms/D-SCRIPT-main/data/', directory, '/')
training_files <- list.files(path=dscript_data_dir, pattern = 'train')
train_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
training_files[grepl('richoux', training_files, fixed=TRUE)] <- gsub('richoux_*', 'richoux-', training_files[grepl('richoux', training_files, fixed=TRUE)])
names(train_sizes) <- tstrsplit(training_files, '_', keep=1)[[1]]
train_sizes <- prettyNum(train_sizes, big.mark = ',')
return(train_sizes)
}
original_dscript_sizes <- get_sizes_dscript('original')
gold_size <- prettyNum(as.integer(system2("wc",
args = c("-l",
'../algorithms/D-SCRIPT-main/data/gold/Intra1.txt',
" | awk '{print $1}'"),
stdout = TRUE)), big.mark = ',')
names(gold_size) <- 'gold'
original_dscript_sizes <- c(original_dscript_sizes, gold_size)
rewired_dscript_sizes <- get_sizes_dscript('rewired')
dscript_data_dir <- '../algorithms/D-SCRIPT-main/data/partitions/'
training_files <- list.files(path=dscript_data_dir)
partition_dscript_sizes <- sapply(paste0(dscript_data_dir, training_files), function(x){
as.integer(system2("wc",
args = c("-l",
x,
" | awk '{print $1}'"),
stdout = TRUE))
}
)
filenames <- tstrsplit(tstrsplit(training_files, '.txt', keep=1)[[1]], '_', keep=c(1,3))
names(partition_dscript_sizes) <- paste(filenames[[1]], filenames[[2]])
partition_dscript_sizes <- prettyNum(partition_dscript_sizes, big.mark = ',')
breaksList <- c(min(result_mat, na.rm = T), seq(0.5, 1.0, 0.005))
compute_number_colors <- function(mat) {
breaks <- c(min(mat, na.rm = T), seq(0.5, 1.0, 0.0051))
color <- colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100)
rgb_colors <- col2rgb(pheatmap:::scale_colours(as.matrix(mat), col = color, breaks = breaks, na_col = "#DDDDDD"))
luminance <- rgb_colors * c(0.299, 0.587, 0.114)
luminance <- luminance['red', ]+luminance['green', ] + luminance['blue', ]
number_color <- ifelse(luminance < 125, "grey90", "grey30")
return(number_color)
}
#                         'RF-PCA',
#                         'SVM-PCA',
#                         'RF-MDS',
#                         'SVM-MDS',
#                         'RF-\nnode2vec',
#                         'SVM-\nnode2vec',
#                         'Harmonic\nFunction',
#                         'Global and\nLocal Cons.')
# )
#
number_color <- compute_number_colors(result_mat[, 16:ncol(result_mat)])
#                         'RF-PCA',
#                         'SVM-PCA',
#                         'RF-MDS',
#                         'SVM-MDS',
#                         'RF-\nnode2vec',
#                         'SVM-\nnode2vec',
#                         'Harmonic\nFunction',
#                         'Global and\nLocal Cons.')
# )
#
number_color <- compute_number_colors(result_mat[, 16:ncol(result_mat)])
pheatmap(result_mat[, 16:ncol(result_mat)],
#annotation_col = annotation_col[!annotation_col$Test %in% c('Original', 'Rewired'), "Dataset"],
#annotation_colors = list(Dataset = c('HUANG'='#E69F00','GUO'='#56B4E9', 'DU'='#009E73',
#                                      'PAN'='#F0E442','RICHOUX'='#0072B2'),
#                          Test = c('Inter->Intra-1'='#888888', 'Inter->Intra-0'='#44AA99', 'Intra-0->Intra-1'='#661100')),
main = TeX('Train on $\\it{INTER}$, test on $\\it{INTRA}_0$                    Train on $\\it{INTER}$, test on $\\it{INTRA}_1$                    Train on $\\it{INTRA}_0$, test on $\\it{INTRA}_1$'),
cluster_rows = FALSE,
cluster_cols = FALSE,
legend = FALSE,
gaps_row = 7,
gaps_col = c(6, 12),
display_numbers = TRUE,
number_color = number_color,
breaks = breaksList,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
fontsize = 10,
fontsize_number = 11,
fontsize_row = 11,
fontsize_col = 11,
filename = '~/Downloads/heatmap_results_partitions.png',
width=12,
height=10,
labels_col = c(
#partition both -> 0
paste0('HUANG\n(', partition_sizes['huang both'], ')'),
paste0('GUO\n(', partition_sizes['guo both'], ')'),
paste0('DU\n(', partition_sizes['du both'], ')'),
paste0('PAN\n(', partition_sizes['pan both'], ')'),
paste0('RICHOUX-\nUNIPROT\n(', partition_sizes['richoux both'], ')'),
paste0('D-SCRIPT\nUNBALANCED\n(', partition_sizes['dscript both'], ')'),
#partition both ->1
paste0('HUANG\n(', partition_sizes['huang both'], ')'),
paste0('GUO\n(', partition_sizes['guo both'], ')'),
paste0('DU\n(', partition_sizes['du both'], ')'),
paste0('PAN\n(', partition_sizes['pan both'], ')'),
paste0('RICHOUX-\nUNIPROT\n(', partition_sizes['richoux both'], ')'),
paste0('D-SCRIPT\nUNBALANCED\n(', partition_sizes['dscript both'], ')'),
#partition 0 -> 1
paste0('HUANG\n(', partition_sizes['huang 0'], ')'),
paste0('GUO\n(', partition_sizes['guo 0'], ')'),
paste0('DU\n(', partition_sizes['du 0'], ')'),
paste0('PAN\n(', partition_sizes['pan 0'], ')'),
paste0('RICHOUX-\nUNIPROT\n(', partition_sizes['richoux 0'], ')'),
paste0('D-SCRIPT\nUNBALANCED\n(', partition_sizes['dscript 0'], ')')
),
labels_row = c('SPRINT\n(AUPR)',
'Richoux-\nFC',
'Richoux-\nLSTM',
'DeepFE',
'PIPR',
'D-SCRIPT',
'Topsy Turvy',
'RF-PCA',
'SVM-PCA',
'RF-MDS',
'SVM-MDS',
'RF-\nnode2vec',
'SVM-\nnode2vec',
'Harmonic\nFunction',
'Global and\nLocal Cons.')
)
