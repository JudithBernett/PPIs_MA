proportion_low_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_neg])/nrow(all_interactions[V3 == 1])
proportion_high_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_pos])/nrow(all_interactions[V3 == 0])
proportion_low_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_neg])/nrow(all_interactions[V3 == 0])
partition_train <- 'INTER'
deg_close_to_1 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio <= 0.1, protein]
all_interactions[, involved_pos := ifelse(V1 %in% deg_close_to_1 | V2 %in% deg_close_to_1, 1, 0)]
all_interactions[, involved_neg := ifelse(V1 %in% deg_close_to_0 | V2 %in% deg_close_to_0, 1, 0)]
proportion_high_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_pos])/nrow(all_interactions[V3 == 1])
proportion_low_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_neg])/nrow(all_interactions[V3 == 1])
proportion_high_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_pos])/nrow(all_interactions[V3 == 0])
proportion_low_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_neg])/nrow(all_interactions[V3 == 0])
get_proportions <- function(name, test, degree_ratios, partition_train='INTRA-0', partition_test='1') {
if(name == 'gold_standard' & test == 'original'){
all_interactions <- fread('../algorithms/D-SCRIPT-main/data/gold/Intra1.txt')
}else if(test == 'partition'){
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/partitions/', name, '_partition_', partition_test, '.txt'))
}else{
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/', test, '/', name, '_test.txt'))
}
name <- toupper(name)
name <- gsub('_', '-', name)
if(name == 'DSCRIPT'){
name <- 'D-SCRIPT UNBALANCED'
}
if(test == 'partition'){
deg_close_to_1 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio <= 0.1, protein]
}else{
deg_close_to_1 <- degree_ratios[dataset == name & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & degree_ratio <= 0.1, protein]
}
all_interactions[, involved_pos := ifelse(V1 %in% deg_close_to_1 | V2 %in% deg_close_to_1, 1, 0)]
all_interactions[, involved_neg := ifelse(V1 %in% deg_close_to_0 | V2 %in% deg_close_to_0, 1, 0)]
proportion_high_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_pos])/nrow(all_interactions[V3 == 1])
proportion_low_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_neg])/nrow(all_interactions[V3 == 1])
proportion_high_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_pos])/nrow(all_interactions[V3 == 0])
proportion_low_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_neg])/nrow(all_interactions[V3 == 0])
return(data.table('%high p of pos.' = proportion_high_deg_ratio_pos,
'%low p of pos.' = proportion_low_deg_ratio_pos,
'%high p of neg' = proportion_high_deg_ratio_neg,
'%low p of neg' = proportion_low_deg_ratio_neg,
name=name))
}
test <- 'partition'
degree_ratios <- fread(paste0('../network_data/', test, '_degree_ratios.csv'))
if(test == 'original' | test == 'rewired'){
degree_ratios[dataset == 'richoux_regular', dataset := 'RICHOUX-REGULAR']
degree_ratios[dataset == 'richoux_strict', dataset := 'RICHOUX-STRICT']
}else{
degree_ratios[, c("dataset", "partition") := tstrsplit(dataset, '_')]
degree_ratios[dataset == 'richoux', dataset := 'RICHOUX-UNIPROT']
degree_ratios[partition == 'both', partition := 'INTER']
degree_ratios[partition == '0', partition := 'INTRA-0']
degree_ratios[partition == '1', partition := 'INTRA-1']
}
degree_ratios[dataset == 'dscript', dataset := 'D-SCRIPT UNBALANCED']
if(test == 'original'){
degree_ratios[dataset == 'gold_standard', dataset := 'GOLD-STANDARD']
degree_ratios[, dataset := toupper(dataset)]
degree_ratios[, dataset := factor(dataset, levels = c('HUANG', 'GUO', 'DU',
'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED', 'GOLD-STANDARD'))]
}else{
degree_ratios[, dataset := toupper(dataset)]
if(test == 'rewired'){
degree_ratios[, dataset := factor(dataset, levels = c('HUANG', 'GUO', 'DU',
'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED'))]
}else{
degree_ratios[, dataset := factor(dataset, levels = c('HUANG', 'GUO', 'DU',
'PAN', 'RICHOUX-UNIPROT', 'D-SCRIPT UNBALANCED'))]
}
}
colorBlindBlack8  <- c('#000000', '#E69F00', '#56B4E9', '#009E73',
'#F0E442', '#0072B2', '#D55E00', '#CC79A7', '#661100')
get_proportions <- function(name, test, degree_ratios, partition_train='INTRA-0', partition_test='1') {
if(name == 'gold_standard' & test == 'original'){
all_interactions <- fread('../algorithms/D-SCRIPT-main/data/gold/Intra1.txt')
}else if(test == 'partition'){
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/partitions/', name, '_partition_', partition_test, '.txt'))
}else{
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/', test, '/', name, '_test.txt'))
}
name <- toupper(name)
name <- gsub('_', '-', name)
if(name == 'DSCRIPT'){
name <- 'D-SCRIPT UNBALANCED'
}
if(test == 'partition'){
deg_close_to_1 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio <= 0.1, protein]
}else{
deg_close_to_1 <- degree_ratios[dataset == name & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & degree_ratio <= 0.1, protein]
}
all_interactions[, involved_pos := ifelse(V1 %in% deg_close_to_1 | V2 %in% deg_close_to_1, 1, 0)]
all_interactions[, involved_neg := ifelse(V1 %in% deg_close_to_0 | V2 %in% deg_close_to_0, 1, 0)]
proportion_high_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_pos])/nrow(all_interactions[V3 == 1])
proportion_low_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_neg])/nrow(all_interactions[V3 == 1])
proportion_high_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_pos])/nrow(all_interactions[V3 == 0])
proportion_low_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_neg])/nrow(all_interactions[V3 == 0])
return(data.table('%high p of pos.' = proportion_high_deg_ratio_pos,
'%low p of pos.' = proportion_low_deg_ratio_pos,
'%high p of neg' = proportion_high_deg_ratio_neg,
'%low p of neg' = proportion_low_deg_ratio_neg,
name=name))
}
get_proportions <- function(name, test, degree_ratios, partition_train='INTRA-0', partition_test='1') {
if(name == 'gold_standard' & test == 'original'){
all_interactions <- fread('../algorithms/D-SCRIPT-main/data/gold/Intra1.txt')
}else if(test == 'partition'){
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/partitions/', name, '_partition_', partition_test, '.txt'))
}else{
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/', test, '/', name, '_test.txt'))
}
name <- toupper(name)
name <- gsub('_', '-', name)
if(name == 'DSCRIPT'){
name <- 'D-SCRIPT UNBALANCED'
}
if(test == 'partition'){
deg_close_to_1 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio <= 0.1, protein]
}else{
deg_close_to_1 <- degree_ratios[dataset == name & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & degree_ratio <= 0.1, protein]
}
all_interactions[, involved_pos := ifelse(V1 %in% deg_close_to_1 | V2 %in% deg_close_to_1, 1, 0)]
all_interactions[, involved_neg := ifelse(V1 %in% deg_close_to_0 | V2 %in% deg_close_to_0, 1, 0)]
proportion_high_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_pos])/nrow(all_interactions[V3 == 1])
proportion_low_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_neg])/nrow(all_interactions[V3 == 1])
proportion_high_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_pos])/nrow(all_interactions[V3 == 0])
proportion_low_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_neg])/nrow(all_interactions[V3 == 0])
if(test == 'partition'){
part_test <- ifelse(partition_test == '0', 'INTRA-0', 'INTRA-1')
return(data.table('%high p of pos.' = proportion_high_deg_ratio_pos,
'%low p of pos.' = proportion_low_deg_ratio_pos,
'%high p of neg' = proportion_high_deg_ratio_neg,
'%low p of neg' = proportion_low_deg_ratio_neg,
name=name,
partition_train=partition_train,
partition_test=part_test))
}else{
return(data.table('%high p of pos.' = proportion_high_deg_ratio_pos,
'%low p of pos.' = proportion_low_deg_ratio_pos,
'%high p of neg' = proportion_high_deg_ratio_neg,
'%low p of neg' = proportion_low_deg_ratio_neg,
name=name))
}
}
df <- get_proportions('huang', 'partition', degree_ratios, 'INTER', '0')
View(df)
get_proportions <- function(name, test, degree_ratios, partition_train='INTRA-0', partition_test='1') {
if(name == 'gold_standard' & test == 'original'){
all_interactions <- fread('../algorithms/D-SCRIPT-main/data/gold/Intra1.txt')
}else if(test == 'partition'){
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/partitions/', name, '_partition_', partition_test, '.txt'))
}else{
all_interactions <- fread(paste0('../algorithms/D-SCRIPT-main/data/', test, '/', name, '_test.txt'))
}
name <- toupper(name)
name <- gsub('_', '-', name)
if(name == 'DSCRIPT'){
name <- 'D-SCRIPT UNBALANCED'
}else if(name == 'RICHOUX'){
name <- 'RICHOUX-UNIPROT'
}
if(test == 'partition'){
deg_close_to_1 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & partition == partition_train & degree_ratio <= 0.1, protein]
}else{
deg_close_to_1 <- degree_ratios[dataset == name & degree_ratio >= 0.9, protein]
deg_close_to_0 <- degree_ratios[dataset == name & degree_ratio <= 0.1, protein]
}
all_interactions[, involved_pos := ifelse(V1 %in% deg_close_to_1 | V2 %in% deg_close_to_1, 1, 0)]
all_interactions[, involved_neg := ifelse(V1 %in% deg_close_to_0 | V2 %in% deg_close_to_0, 1, 0)]
proportion_high_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_pos])/nrow(all_interactions[V3 == 1])
proportion_low_deg_ratio_pos <- sum(all_interactions[V3 == 1, involved_neg])/nrow(all_interactions[V3 == 1])
proportion_high_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_pos])/nrow(all_interactions[V3 == 0])
proportion_low_deg_ratio_neg <- sum(all_interactions[V3 == 0, involved_neg])/nrow(all_interactions[V3 == 0])
if(test == 'partition'){
part_test <- ifelse(partition_test == '0', 'INTRA-0', 'INTRA-1')
return(data.table('%high p of pos.' = proportion_high_deg_ratio_pos,
'%low p of pos.' = proportion_low_deg_ratio_pos,
'%high p of neg' = proportion_high_deg_ratio_neg,
'%low p of neg' = proportion_low_deg_ratio_neg,
name=name,
partition_train=partition_train,
partition_test=part_test))
}else{
return(data.table('%high p of pos.' = proportion_high_deg_ratio_pos,
'%low p of pos.' = proportion_low_deg_ratio_pos,
'%high p of neg' = proportion_high_deg_ratio_neg,
'%low p of neg' = proportion_low_deg_ratio_neg,
name=name))
}
}
if(test == 'partition'){
df <- get_proportions('huang', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('huang', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('huang', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- get_proportions('guo', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- get_proportions('du', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- get_proportions('pan', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- get_proportions('richoux', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- get_proportions('dscript', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTRA-0', '1'))
}else{
df <- get_proportions('huang', test, degree_ratios)
df <- rbind(df, get_proportions('guo', test, degree_ratios))
df <- rbind(df, get_proportions('du', test, degree_ratios))
df <- rbind(df, get_proportions('pan', test, degree_ratios))
df <- rbind(df, get_proportions('richoux_regular', test, degree_ratios))
df <- rbind(df, get_proportions('richoux_strict', test, degree_ratios))
df <- rbind(df, get_proportions('dscript', test, degree_ratios))
if(test == 'original'){
df <- rbind(df, get_proportions('gold_standard', test, degree_ratios))
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED', 'GOLD-STANDARD'))]
}else{
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED'))]
}
}
View(df)
if(test == 'partition'){
df <- get_proportions('huang', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('huang', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('huang', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTRA-0', '1'))
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-UNIPROT', 'D-SCRIPT UNBALANCED'))]
}else{
df <- get_proportions('huang', test, degree_ratios)
df <- rbind(df, get_proportions('guo', test, degree_ratios))
df <- rbind(df, get_proportions('du', test, degree_ratios))
df <- rbind(df, get_proportions('pan', test, degree_ratios))
df <- rbind(df, get_proportions('richoux_regular', test, degree_ratios))
df <- rbind(df, get_proportions('richoux_strict', test, degree_ratios))
df <- rbind(df, get_proportions('dscript', test, degree_ratios))
if(test == 'original'){
df <- rbind(df, get_proportions('gold_standard', test, degree_ratios))
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED', 'GOLD-STANDARD'))]
}else{
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED'))]
}
}
View(df)
df[, setting := paste(partition_train, partition_test, sep='->')]
View(df)
df[, setting := factor(setting, levels = c('INTER->INTRA-0', 'INTER->INTRA-1', 'INTRA-0->INTRA-1'))]
View(df)
df <- df[order(name, setting)]
View(df)
mat <- as.matrix(df[, c(1:4)])
rownames(mat) <- paste(name, setting, sep=': ')
rownames(mat) <- paste(df$name, df$setting, sep=': ')
View(mat)
compute_number_colors <- function(mat) {
breaks <- seq(0,1, 0.01)
color <- colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100)
rgb_colors <- col2rgb(pheatmap:::scale_colours(as.matrix(mat), col = color, breaks = breaks, na_col = "#DDDDDD"))
luminance <- rgb_colors * c(0.299, 0.587, 0.114)
luminance <- luminance['red', ]+luminance['green', ] + luminance['blue', ]
number_color <- ifelse(luminance < 125, "grey90", "grey30")
return(number_color)
}
pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
display_numbers = TRUE)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE)
if(test == 'partition'){
df <- get_proportions('huang', 'partition', degree_ratios, 'INTER', '0')
df <- rbind(df, get_proportions('huang', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('huang', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('guo', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('du', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('pan', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('richoux', 'partition', degree_ratios, 'INTRA-0', '1'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTER', '0'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTER', '1'))
df <- rbind(df, get_proportions('dscript', 'partition', degree_ratios, 'INTRA-0', '1'))
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-UNIPROT', 'D-SCRIPT UNBALANCED'))]
df[, setting := paste(partition_train, partition_test, sep='->')]
df[, setting := factor(setting, levels = c('INTER->INTRA-0', 'INTER->INTRA-1', 'INTRA-0->INTRA-1'))]
df <- df[order(setting, name)]
mat <- as.matrix(df[, c(1:4)])
rownames(mat) <- paste(df$name, df$setting, sep=': ')
}else{
df <- get_proportions('huang', test, degree_ratios)
df <- rbind(df, get_proportions('guo', test, degree_ratios))
df <- rbind(df, get_proportions('du', test, degree_ratios))
df <- rbind(df, get_proportions('pan', test, degree_ratios))
df <- rbind(df, get_proportions('richoux_regular', test, degree_ratios))
df <- rbind(df, get_proportions('richoux_strict', test, degree_ratios))
df <- rbind(df, get_proportions('dscript', test, degree_ratios))
if(test == 'original'){
df <- rbind(df, get_proportions('gold_standard', test, degree_ratios))
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED', 'GOLD-STANDARD'))]
}else{
df[, name := factor(name, levels = c('HUANG', 'GUO', 'DU', 'PAN', 'RICHOUX-REGULAR', 'RICHOUX-STRICT', 'D-SCRIPT UNBALANCED'))]
}
df <- df[order(name)]
mat <- as.matrix(df[, c(1:4)])
rownames(mat) <- df$name
}
compute_number_colors <- function(mat) {
breaks <- seq(0,1, 0.01)
color <- colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100)
rgb_colors <- col2rgb(pheatmap:::scale_colours(as.matrix(mat), col = color, breaks = breaks, na_col = "#DDDDDD"))
luminance <- rgb_colors * c(0.299, 0.587, 0.114)
luminance <- luminance['red', ]+luminance['green', ] + luminance['blue', ]
number_color <- ifelse(luminance < 125, "grey90", "grey30")
return(number_color)
}
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE)
number_color <- matrix(compute_number_colors(mat), nrow=18)
number_color <- matrix(compute_number_colors(mat), nrow=18)
breaksList <- seq(0,1, 0.01)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=6,
height=5
)
number_color <- matrix(compute_number_colors(t(mat)), nrow=4)
breaksList <- seq(0,1, 0.01)
pheatmap(t(mat),
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=6,
height=5
)
pheatmap(t(mat),
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=5,
height=6
)
number_color <- matrix(compute_number_colors(mat), nrow=18)
breaksList <- seq(0,1, 0.01)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=5,
height=6
)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=10,
height=6
)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=18,
height=5
)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
number_color = number_color,
color = colorRampPalette(rev(brewer.pal(n = 9, name =
"RdYlBu")))(100),
breaks = breaksList,
legend = FALSE,
filename = paste0('plots/heatmap_degree_', test, '.pdf'),
width=8,
height=5
)
gold_standard_results <- fread(paste0('results/gold_standard_', measure, '.csv'))
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(latex2exp)
measure <- 'Accuracy'
gold_standard_results <- fread(paste0('results/gold_standard_', measure, '.csv'))
View(gold_standard_results)
gold_standard_results[, acc := round(Accuracy, 2)]
View(gold_standard_results)
library(data.table)
human_train <- fread('../algorithms/D-SCRIPT-main/dscript-data/pairs/human_train.tsv')
human_test <- fread('../algorithms/D-SCRIPT-main/dscript-data/pairs/human_test.tsv')
head(human_train)
human_prots <- data.table(protein = c(unique(human_train$V1), unique(human_train$V2), unique(human_test$V1), unique(human_test$V2)))
View(human_prots)
install.packages('seqinr')
library(seqinr)
human_fasta <- read.fasta(file = system.file("../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", package = "seqinr"), seqtype = "AA")
human_fasta <- read.fasta(file = system.file("../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", package = "seqinr"), seqtype = "AA", as.string = T)
fasta_file <- system.file("../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", package = "seqinr")
fasta_file <- system.file("/Users/judithbernett/PycharmProjects/PPIs_MA/algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", package = "seqinr")
?system.file
fasta_file <- system.file("/Users/judithbernett/PycharmProjects/PPIs_MA/algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta)
human_fasta <- read.fasta(file = "../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", seqtype = "AA")
human_fasta <- read.fasta(file = "../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", seqtype = "AA", as.string = T)
View(human_fasta)
human_fasta[["9606.ENSP00000000233"]]
human_fasta <- read.fasta(file = "../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", seqtype = "AA", as.string = T, seqonly = T)
View(human_fasta)
human_fasta <- read.fasta(file = "../algorithms/D-SCRIPT-main/dscript-data/seqs/human.fasta", seqtype = "AA", as.string = T)
length(human_fasta[["9606.ENSP00000000233"]])
length(human_fasta[["9606.ENSP00000000233"]][1])
length(human_fasta[["9606.ENSP00000000233"]][[1]])
human_fasta[["9606.ENSP00000000233"]][[1]]
View(human_fasta[["9606.ENSP00000000233"]])
class(human_fasta[["9606.ENSP00000000233"]])
?SeqFastaAA
summary(human_fasta[["9606.ENSP00000000233"]])
human_fasta[["9606.ENSP00000000233"]]$length
summary(human_fasta[["9606.ENSP00000000233"]])$length
lengths <- lapply(human_fasta, function(x){summary(x)$length})
lengths <- lapply(human_fasta[1:10], function(x){summary(x)$length})
lengths <- sapply(human_fasta, function(x){summary(x)$length})
rm(lengths)
rm(human_fasta)
lengths <- fread('~/Downloads/all_lengths.tsv')
library(ggplot2)
ggplot(lengths, aes(x=length))+geom_histogram()
library(data.table)
library(ggplot2)
ggplot(lengths, aes(x=length))+geom_histogram()
