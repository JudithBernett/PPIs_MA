})
all_sets <- rbindlist(all_sets, idcol='filename')
all_sets[, c('dataset', 'partition') := tstrsplit(filename, '_', keep=c(1,3))]
all_sets <- all_sets[, -'filename']
all_sets[, data_part := paste(dataset, partition, sep='_')]
all_sets[, both_0 := ifelse(partition %in% c('0', 'both'), T, F)]
all_sets[, both_1 := ifelse(partition %in% c('1', 'both'), T, F)]
all_sets[, p0_p1 := ifelse(partition %in% c('0', '1'), T, F)]
all_sets[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
all_sets <- all_sets[order(dataset)]
both_0 <- data.table(unique(all_sets[both_0 == T, c('Protein', 'dataset')])[, table(dataset)])
both_0$train <- 'both'
both_0$test <- '0'
both_1 <- data.table(unique(all_sets[both_1 == T, c('Protein', 'dataset')])[, table(dataset)])
both_1$train <- 'both'
both_1$test <- '1'
p0_p1 <- data.table(unique(all_sets[p0_p1 == T, c('Protein', 'dataset')])[, table(dataset)])
p0_p1$train <- '0'
p0_p1$test <- '1'
overlaps <- rbind(both_0, both_1)
overlaps <- rbind(overlaps, p0_p1)
overlaps[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
overlaps[, train := factor(train, levels=c('both', '0'))]
overlaps[, data_train := paste(dataset, train, sep='_')]
unique_prots_datasets <- data.table(unique(all_sets[, c('Protein', 'data_part')])[, table(data_part)])
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_train', by.y = 'data_part')
unique_prots_datasets
overlaps[, data_test := paste(dataset, test, sep='_')]
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_test', by.y = 'data_part')
View(overlaps)
library(data.table)
library(ggplot2)
library(UpSetR)
## Citation count
citations <- data.table(
citations = c(623, 63, 147, 269, 121, 63, 8, 31, 143, 20, 141, 40, 9, 51, 41, 8, 200, 80, 951, 2, 30, 96, 50, 3, 128, 20),
code_available = c(F, F, F, F, T, F, F, F, T, F, F, T, F, F, F, F, T, F, F, F, F, T, T, T, T, T)
)
ggplot(citations, aes(x = citations, color = code_available))+
stat_ecdf()+
theme_bw()
## UpSet plot
all_sets <- lapply(list.files(path='../algorithms/SPRINT/data/partitions', full.names = T, recursive = T),
fread, header=F)
names(all_sets) <- tstrsplit(list.files(path='../algorithms/SPRINT/data/partitions', recursive = T), '.txt', keep=1)[[1]]
all_sets <- lapply(all_sets, function(x){
return(unique(melt(x, measure.vars = c('V1', 'V2'), value.name = 'Protein')[, -'variable']))
})
all_sets <- rbindlist(all_sets, idcol='filename')
all_sets[, c('dataset', 'partition') := tstrsplit(filename, '_', keep=c(1,3))]
all_sets <- all_sets[, -'filename']
all_sets[, data_part := paste(dataset, partition, sep='_')]
all_sets[, both_0 := ifelse(partition %in% c('0', 'both'), T, F)]
all_sets[, both_1 := ifelse(partition %in% c('1', 'both'), T, F)]
all_sets[, p0_p1 := ifelse(partition %in% c('0', '1'), T, F)]
all_sets[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
all_sets <- all_sets[order(dataset)]
both_0 <- data.table(unique(all_sets[both_0 == T, c('Protein', 'dataset')])[, table(dataset)])
both_0$train <- 'both'
both_0$test <- '0'
both_1 <- data.table(unique(all_sets[both_1 == T, c('Protein', 'dataset')])[, table(dataset)])
both_1$train <- 'both'
both_1$test <- '1'
p0_p1 <- data.table(unique(all_sets[p0_p1 == T, c('Protein', 'dataset')])[, table(dataset)])
p0_p1$train <- '0'
p0_p1$test <- '1'
overlaps <- rbind(both_0, both_1)
overlaps <- rbind(overlaps, p0_p1)
overlaps[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
overlaps[, train := factor(train, levels=c('both', '0'))]
overlaps[, data_train := paste(dataset, train, sep='_')]
overlaps[, data_test := paste(dataset, test, sep='_')]
unique_prots_datasets <- data.table(unique(all_sets[, c('Protein', 'data_part')])[, table(data_part)])
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_train', by.y = 'data_part')
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_test', by.y = 'data_part')
library(data.table)
library(ggplot2)
library(UpSetR)
## Citation count
citations <- data.table(
citations = c(623, 63, 147, 269, 121, 63, 8, 31, 143, 20, 141, 40, 9, 51, 41, 8, 200, 80, 951, 2, 30, 96, 50, 3, 128, 20),
code_available = c(F, F, F, F, T, F, F, F, T, F, F, T, F, F, F, F, T, F, F, F, F, T, T, T, T, T)
)
ggplot(citations, aes(x = citations, color = code_available))+
stat_ecdf()+
theme_bw()
## UpSet plot
all_sets <- lapply(list.files(path='../algorithms/SPRINT/data/partitions', full.names = T, recursive = T),
fread, header=F)
names(all_sets) <- tstrsplit(list.files(path='../algorithms/SPRINT/data/partitions', recursive = T), '.txt', keep=1)[[1]]
all_sets <- lapply(all_sets, function(x){
return(unique(melt(x, measure.vars = c('V1', 'V2'), value.name = 'Protein')[, -'variable']))
})
all_sets <- rbindlist(all_sets, idcol='filename')
all_sets[, c('dataset', 'partition') := tstrsplit(filename, '_', keep=c(1,3))]
all_sets <- all_sets[, -'filename']
all_sets[, data_part := paste(dataset, partition, sep='_')]
all_sets[, both_0 := ifelse(partition %in% c('0', 'both'), T, F)]
all_sets[, both_1 := ifelse(partition %in% c('1', 'both'), T, F)]
all_sets[, p0_p1 := ifelse(partition %in% c('0', '1'), T, F)]
all_sets[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
all_sets <- all_sets[order(dataset)]
both_0 <- data.table(unique(all_sets[both_0 == T, c('Protein', 'dataset')])[, table(dataset)])
both_0$train <- 'both'
both_0$test <- '0'
both_1 <- data.table(unique(all_sets[both_1 == T, c('Protein', 'dataset')])[, table(dataset)])
both_1$train <- 'both'
both_1$test <- '1'
p0_p1 <- data.table(unique(all_sets[p0_p1 == T, c('Protein', 'dataset')])[, table(dataset)])
p0_p1$train <- '0'
p0_p1$test <- '1'
overlaps <- rbind(both_0, both_1)
overlaps <- rbind(overlaps, p0_p1)
overlaps[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
overlaps[, train := factor(train, levels=c('both', '0'))]
overlaps[, data_train := paste(dataset, train, sep='_')]
overlaps[, data_test := paste(dataset, test, sep='_')]
unique_prots_datasets <- data.table(unique(all_sets[, c('Protein', 'data_part')])[, table(data_part)])
View(unique_prots_datasets)
overlaps
View(unique_prots_datasets)
View(p0_p1)
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_train', by.y = 'data_part')
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_test', by.y = 'data_part')
overlaps
get_overlap <- function(dataset, train, test) {
data_train <- paste(dataset, train, sep='_')
ds_train <- all_sets[data_part == data_train]
data_test <- paste(dataset, test, sep='_')
ds_test <- all_sets[data_part == data_test]
length(intersect(ds_train$Protein, ds_test$Protein))
}
overlaps[, train_intersect_test := get_overlap(dataset, train, test), by = seq_len(nrow(overlaps))]
overlaps <- overlaps[order(dataset, train)]
overlaps[, Dataset := paste(dataset, train, test, sep='_')]
overlaps
View(overlaps)
734/1157
colnames(overlaps) <- c('Dataset', 'Unique whole data', 'Whole data ∩ train', 'train ∩ test', 'n_test')
overlaps <- overlaps[, c(10, 4, 7, 9, 8)]
colnames(overlaps) <- c('Dataset', 'Unique whole data', 'Whole data ∩ train', 'train ∩ test', 'n_test')
overlaps[, perc_of_test := round(100 * n_test/`train ∩ test`, 1)]
overlaps
overlaps[, perc_of_test := round(100 * `train ∩ test`/n_test, 1)]
overlaps
overlaps[, -'n_test']
overlaps
overlaps <- overlaps[, -'n_test']
overlaps
?fromExpression
c(overlaps$Dataset = overlaps$`Unique whole data`)
setNames(overlaps$Dataset, overlaps$`Unique whole data`)
setNames(overlaps$`Unique whole data`, overlaps$Dataset)
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
library(data.table)
library(ggplot2)
library(UpSetR)
## Citation count
citations <- data.table(
citations = c(623, 63, 147, 269, 121, 63, 8, 31, 143, 20, 141, 40, 9, 51, 41, 8, 200, 80, 951, 2, 30, 96, 50, 3, 128, 20),
code_available = c(F, F, F, F, T, F, F, F, T, F, F, T, F, F, F, F, T, F, F, F, F, T, T, T, T, T)
)
ggplot(citations, aes(x = citations, color = code_available))+
stat_ecdf()+
theme_bw()
## UpSet plot
all_sets <- lapply(list.files(path='../algorithms/SPRINT/data/partitions', full.names = T, recursive = T),
fread, header=F)
names(all_sets) <- tstrsplit(list.files(path='../algorithms/SPRINT/data/partitions', recursive = T), '.txt', keep=1)[[1]]
all_sets <- lapply(all_sets, function(x){
return(unique(melt(x, measure.vars = c('V1', 'V2'), value.name = 'Protein')[, -'variable']))
})
all_sets <- rbindlist(all_sets, idcol='filename')
all_sets[, c('dataset', 'partition') := tstrsplit(filename, '_', keep=c(1,3))]
all_sets <- all_sets[, -'filename']
all_sets[, data_part := paste(dataset, partition, sep='_')]
all_sets[, both_0 := ifelse(partition %in% c('0', 'both'), T, F)]
all_sets[, both_1 := ifelse(partition %in% c('1', 'both'), T, F)]
all_sets[, p0_p1 := ifelse(partition %in% c('0', '1'), T, F)]
all_sets[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
all_sets <- all_sets[order(dataset)]
both_0 <- data.table(unique(all_sets[both_0 == T, c('Protein', 'dataset')])[, table(dataset)])
both_0$train <- 'both'
both_0$test <- '0'
both_1 <- data.table(unique(all_sets[both_1 == T, c('Protein', 'dataset')])[, table(dataset)])
both_1$train <- 'both'
both_1$test <- '1'
p0_p1 <- data.table(unique(all_sets[p0_p1 == T, c('Protein', 'dataset')])[, table(dataset)])
p0_p1$train <- '0'
p0_p1$test <- '1'
overlaps <- rbind(both_0, both_1)
overlaps <- rbind(overlaps, p0_p1)
overlaps[, dataset := factor(dataset, levels=c('huang', 'guo', 'du', 'pan', 'richoux'))]
overlaps[, train := factor(train, levels=c('both', '0'))]
overlaps[, data_train := paste(dataset, train, sep='_')]
overlaps[, data_test := paste(dataset, test, sep='_')]
unique_prots_datasets <- data.table(unique(all_sets[, c('Protein', 'data_part')])[, table(data_part)])
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_train', by.y = 'data_part')
overlaps <- merge(overlaps, unique_prots_datasets, all.x = T, by.x = 'data_test', by.y = 'data_part')
get_overlap <- function(dataset, train, test) {
data_train <- paste(dataset, train, sep='_')
ds_train <- all_sets[data_part == data_train]
data_test <- paste(dataset, test, sep='_')
ds_test <- all_sets[data_part == data_test]
length(intersect(ds_train$Protein, ds_test$Protein))
}
overlaps[, train_intersect_test := get_overlap(dataset, train, test), by = seq_len(nrow(overlaps))]
overlaps <- overlaps[order(dataset, train)]
overlaps[, Dataset := paste(dataset, train, test, sep='_')]
overlaps
colnames(overlaps) <- c('Test','Train','Data', 'Unique whole data', 'train', 'test', 'unique_train', 'unique_test', 'train ∩ test', 'Dataset')
overlaps
overlaps <- overlaps[, c('Dataset', 'Unique whole data', 'unique_train', 'unique_test', 'train ∩ test', 'Train', 'Test']
overlaps <- overlaps[, c('Dataset', 'Unique whole data', 'unique_train', 'unique_test', 'train ∩ test', 'Train', 'Test')]
overlaps
overlaps[, perc_of_test := round(100 * `train ∩ test`/unique_train, 1)]
overlaps
View(unique_prots_datasets)
input <- setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
input
input <- c(input, setNames(overlaps$`Unique whole data`, overlaps$Dataset))
input
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
unique_prots_datasets <- setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
unique_prots_datasets
input
input <- c(input, unique_prots_datasets)
overlaps[Dataset=='huang_both_0', 'train ∩ test']
input <- c(input,
'huang_both_0&huang_0' = unique_prots_datasets['huang_0'],
'huang_both_0&huang_both' = unique_prots_datasets['huang_both'],
'huang_both_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both_1&huang_both' = unique_prots_datasets['huang_both'],
'huang_0_1&huang_0' = unique_prots_datasets['huang_0'],
'huang_0_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both&huang_0' = overlaps[Dataset=='huang_both_0', 'train ∩ test'],
'huang_both&huang_1' = overlaps[Dataset=='huang_both_1', 'train ∩ test'],
'huang_0&huang_1' = overlaps[Dataset=='huang_0_1', 'train ∩ test'],
)
input <- c(input,
'huang_both_0&huang_0' = unique_prots_datasets['huang_0'],
'huang_both_0&huang_both' = unique_prots_datasets['huang_both'],
'huang_both_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both_1&huang_both' = unique_prots_datasets['huang_both'],
'huang_0_1&huang_0' = unique_prots_datasets['huang_0'],
'huang_0_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both&huang_0' = overlaps[Dataset=='huang_both_0', 'train ∩ test'],
'huang_both&huang_1' = overlaps[Dataset=='huang_both_1', 'train ∩ test'],
'huang_0&huang_1' = overlaps[Dataset=='huang_0_1', 'train ∩ test']
)
upset(fromExpression(input))
intersect(c(1, 2, 3, 5, 7, 8, 11, 12, 13), c(1, 5, 6, 7, 8, 9, 10, 12, 13))
length(intersect(c(1, 2, 3, 5, 7, 8, 11, 12, 13), c(1, 5, 6, 7, 8, 9, 10, 12, 13)))
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
unique_prots_datasets <- setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
input <- c(input, unique_prots_datasets)
input <- c(input,
`huang_both_0&huang_0` = unique_prots_datasets['huang_0'],
`huang_both_0&huang_both` = unique_prots_datasets['huang_both'],
`huang_both_1&huang_1` = unique_prots_datasets['huang_1'],
`huang_both_1&huang_both` = unique_prots_datasets['huang_both'],
`huang_0_1&huang_0` = unique_prots_datasets['huang_0'],
`huang_0_1&huang_1` = unique_prots_datasets['huang_1'],
`huang_both&huang_0` = overlaps[Dataset=='huang_both_0', 'train ∩ test'],
`huang_both&huang_1` = overlaps[Dataset=='huang_both_1', 'train ∩ test'],
`huang_0&huang_1` = overlaps[Dataset=='huang_0_1', 'train ∩ test']
)
upset(fromExpression(input))
input
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
unique_prots_datasets <- setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
input <- c(input, unique_prots_datasets)
input
overlaps[Dataset=='huang_both_0', 'train ∩ test']
overlaps[Dataset=='huang_both_0', c('train ∩ test')]
value(overlaps[Dataset=='huang_both_0', 'train ∩ test'])
unlist(overlaps[Dataset=='huang_both_0', 'train ∩ test'])
unname(overlaps[Dataset=='huang_both_0', 'train ∩ test'])
input <- c(input,
`huang_both_0&huang_0` = unique_prots_datasets['huang_0'],
`huang_both_0&huang_both` = unique_prots_datasets['huang_both'],
`huang_both_1&huang_1` = unique_prots_datasets['huang_1'],
`huang_both_1&huang_both` = unique_prots_datasets['huang_both'],
`huang_0_1&huang_0` = unique_prots_datasets['huang_0'],
`huang_0_1&huang_1` = unique_prots_datasets['huang_1'],
`huang_both&huang_0` = unname(overlaps[Dataset=='huang_both_0', 'train ∩ test']),
`huang_both&huang_1` = unname(overlaps[Dataset=='huang_both_1', 'train ∩ test']),
`huang_0&huang_1` = unname(overlaps[Dataset=='huang_0_1', 'train ∩ test'])
)
input
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
unique_prots_datasets <- setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
input <- c(input, unique_prots_datasets)
input <- c(input,
'huang_both_0&huang_0' = unique_prots_datasets['huang_0'],
'huang_both_0&huang_both' = unique_prots_datasets['huang_both'],
'huang_both_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both_1&huang_both' = unique_prots_datasets['huang_both'],
'huang_0_1&huang_0' = unique_prots_datasets['huang_0'],
'huang_0_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both&huang_0' = overlaps[Dataset=='huang_both_0', 'train ∩ test'],
'huang_both&huang_1' = overlaps[Dataset=='huang_both_1', 'train ∩ test'],
'huang_0&huang_1' = overlaps[Dataset=='huang_0_1', 'train ∩ test']
)
input
c('huang_both_0&huang_0' = unique_prots_datasets['huang_0'],
'huang_both_0&huang_both' = unique_prots_datasets['huang_both'],
'huang_both_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both_1&huang_both' = unique_prots_datasets['huang_both'],
'huang_0_1&huang_0' = unique_prots_datasets['huang_0'],
'huang_0_1&huang_1' = unique_prots_datasets['huang_1'],
'huang_both&huang_0' = overlaps[Dataset=='huang_both_0', 'train ∩ test'],
'huang_both&huang_1' = overlaps[Dataset=='huang_both_1', 'train ∩ test'],
'huang_0&huang_1' = overlaps[Dataset=='huang_0_1', 'train ∩ test']
)
unique_prots_datasets['huang_0']
unname(unique_prots_datasets['huang_0'])
c('huang_both_0&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_both_0&huang_both' = unname(unique_prots_datasets['huang_both']))
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
unique_prots_datasets <- setNames(unique_prots_datasets$N, unique_prots_datasets$data_part)
input <- c(input, unique_prots_datasets)
input <- c(input,
'huang_both_0&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_both_0&huang_both' = unname(unique_prots_datasets['huang_both']),
'huang_both_1&huang_1' = unname(unique_prots_datasets['huang_1']),
'huang_both_1&huang_both' = unname(unique_prots_datasets['huang_both']),
'huang_0_1&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_0_1&huang_1' = unname(unique_prots_datasets['huang_1']),
'huang_both&huang_0' = unname(overlaps[Dataset=='huang_both_0', 'train ∩ test']),
'huang_both&huang_1' = unname(overlaps[Dataset=='huang_both_1', 'train ∩ test']),
'huang_0&huang_1' = unname(overlaps[Dataset=='huang_0_1', 'train ∩ test'])
)
input
upset(fromExpression(input))
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
input <- c(input, unique_prots_datasets)
input
input[grepl('huang', input)]
grepl('huang', input)
?substr
?grepl
gsub('huang', input)
grepl('huang*', input)
grepl('huang', names(input))
input <- input[grepl('huang', names(input))]
input
input <- c(input,
'huang_both_0&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_both_0&huang_both' = unname(unique_prots_datasets['huang_both']),
'huang_both_1&huang_1' = unname(unique_prots_datasets['huang_1']),
'huang_both_1&huang_both' = unname(unique_prots_datasets['huang_both']),
'huang_0_1&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_0_1&huang_1' = unname(unique_prots_datasets['huang_1']),
'huang_both&huang_0' = unname(overlaps[Dataset=='huang_both_0', 'train ∩ test']),
'huang_both&huang_1' = unname(overlaps[Dataset=='huang_both_1', 'train ∩ test']),
'huang_0&huang_1' = unname(overlaps[Dataset=='huang_0_1', 'train ∩ test'])
)
upset(fromExpression(input))
upset(fromExpression(input), order.by = 'freq', decreasing = T)
length(c("P.dactylifera&M.acuminata" = 467,
"O.sativa&M.acuminata" = 29,
"A.thaliana&O.sativa" = 6,
"S.bicolor&A.thaliana" = 9,
"O.sativa&P.dactylifera" = 32,
"S.bicolor&P.dactylifera" = 49,
"S.bicolor&M.acuminata" = 49,
"B.distachyon&O.sativa" = 547,
"S.bicolor&O.sativa" = 1151,
"B.distachyon&A.thaliana" = 10,
"B.distachyon&M.acuminata" = 9,
"B.distachyon&S.bicolor" = 402,
"M.acuminata&A.thaliana" = 155,
"A.thaliana&P.dactylifera" = 105,
"B.distachyon&P.dactylifera" = 25,
"S.bicolor&O.sativa&P.dactylifera" = 42,
"B.distachyon&O.sativa&P.dactylifera" = 12,
"S.bicolor&O.sativa&B.distachyon" = 2809,
"B.distachyon&O.sativa&A.thaliana" = 18,
"S.bicolor&O.sativa&A.thaliana" = 40,
"S.bicolor&B.distachyon&A.thaliana" = 14,
"O.sativa&B.distachyon&M.acuminata" = 28,
"S.bicolor&B.distachyon&M.acuminata" = 13,
"O.sativa&M.acuminata&P.dactylifera" = 35,
"M.acuminata&S.bicolor&A.thaliana" = 21,
"B.distachyon&M.acuminata&A.thaliana" = 7,
"O.sativa&M.acuminata&A.thaliana" = 13,
"M.acuminata&P.dactylifera&A.thaliana" = 206,
"P.dactylifera&A.thaliana&S.bicolor" = 4,
"O.sativa&A.thaliana&P.dactylifera" = 6,
"S.bicolor&O.sativa&M.acuminata" = 64,
"S.bicolor&M.acuminata&P.dactylifera" = 19,
"B.distachyon&A.thaliana&P.dactylifera" = 3,
"B.distachyon&M.acuminata&P.dactylifera" = 12,
"B.distachyon&S.bicolor&P.dactylifera" = 23,
"M.acuminata&B.distachyon&S.bicolor&A.thaliana" = 54,
"P.dactylifera&S.bicolor&O.sativa&M.acuminata" = 62,
"B.distachyon&O.sativa&M.acuminata&P.dactylifera" = 18,
"S.bicolor&B.distachyon&O.sativa&A.thaliana" = 206,
"B.distachyon&M.acuminata&O.sativa&A.thaliana" = 29,
"O.sativa&M.acuminata&A.thaliana&S.bicolor" = 71,
"M.acuminata&O.sativa&P.dactylifera&A.thaliana" = 28,
"B.distachyon&M.acuminata&O.sativa&A.thaliana" = 7,
"B.distachyon&S.bicolor&P.dactylifera&A.thaliana" = 11,
"B.distachyon&O.sativa&P.dactylifera&A.thaliana" = 5,
"A.thaliana&P.dactylifera&S.bicolor&O.sativa" = 21,
"M.acuminata&S.bicolor&P.dactylifera&A.thaliana" = 23,
"M.acuminata&B.distachyon&S.bicolor&P.dactylifera" = 24,
"M.acuminata&O.sativa&S.bicolor&B.distachyon" = 368,
"P.dactylifera&B.distachyon&S.bicolor&O.sativa" = 190,
"P.dactylifera&B.distachyon&S.bicolor&O.sativa&A.thaliana" = 258,
"P.dactylifera&M.acuminata&S.bicolor&B.distachyon&O.sativa" = 685,
"M.acuminata&S.bicolor&B.distachyon&O.sativa&A.thaliana" = 1458,
"S.bicolor&M.acuminata&P.dactylifera&O.sativa&A.thaliana" = 149,
"B.distachyon&M.acuminata&P.dactylifera&O.sativa&A.thaliana" = 80,
"M.acuminata&S.bicolor&B.distachyon&P.dactylifera&A.thaliana" = 113,
"M.acuminata&S.bicolor&B.distachyon&P.dactylifera&O.sativa&A.thaliana" = 7674
))
upset(fromExpression(input), order.by = 'degree')
?upset
upset(fromExpression(input), nintersects = 9)
upset(fromExpression(input), nintersects = 9, order.by = 'degree')
upset(fromExpression(input))
input
upset(fromExpression(input), empty.intersections = 'on')
upset(fromExpression(input))
input <- setNames(overlaps$`Unique whole data`, overlaps$Dataset)
input <- c(input, unique_prots_datasets)
input <- input[grepl('huang', names(input))]
input
input <- c(input,
'huang_both_0&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_both_0&huang_both' = unname(unique_prots_datasets['huang_both']),
'huang_both_1&huang_1' = unname(unique_prots_datasets['huang_1']),
'huang_both_1&huang_both' = unname(unique_prots_datasets['huang_both']),
'huang_0_1&huang_0' = unname(unique_prots_datasets['huang_0']),
'huang_0_1&huang_1' = unname(unique_prots_datasets['huang_1']),
'huang_both&huang_0' = unname(overlaps[Dataset=='huang_both_0', 'train ∩ test']),
'huang_both&huang_1' = unname(overlaps[Dataset=='huang_both_1', 'train ∩ test'])
)
input
upset(fromExpression(input))
View(all_sets)
unname(unique(all_sets[data_part=='huang_0', Protein]))
length(unname(unique(all_sets[data_part=='huang_0', Protein])))
input <- c('huang_0' = unname(unique(all_sets[data_part=='huang_0', Protein])),
'huang_1' = unname(unique(all_sets[data_part=='huang_1', Protein])),
'huang_both' = unname(unique(all_sets[data_part=='huang_both', Protein])))
upset(fromList(input))
input <- c('huang_0' = c(unique(all_sets[data_part=='huang_0', Protein])),
'huang_1' = c(unique(all_sets[data_part=='huang_1', Protein])),
'huang_both' = c(unique(all_sets[data_part=='huang_both', Protein])))
input
c(unique(all_sets[data_part=='huang_0', Protein]))
list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5,
10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))
input <- list('huang_0' = c(unique(all_sets[data_part=='huang_0', Protein])),
'huang_1' = c(unique(all_sets[data_part=='huang_1', Protein])),
'huang_both' = c(unique(all_sets[data_part=='huang_both', Protein])))
input
upset(fromList(input))
input <- list('huang_0' = c(unique(all_sets[data_part=='huang_0', Protein])),
'huang_1' = c(unique(all_sets[data_part=='huang_1', Protein])),
'huang_both' = c(unique(all_sets[data_part=='huang_both', Protein])),
'huang_both_0' = c(unique(all_sets[both_0, Protein])),
'huang_both_1' = c(unique(all_sets[both_1, Protein])),
'huang_0_1' = c(unique(all_sets[p0_p1, Protein]))
)
c(unique(all_sets[both_0, Protein]))
c(unique(all_sets[both_0==T, Protein]))
input <- list('huang_0' = c(unique(all_sets[data_part=='huang_0', Protein])),
'huang_1' = c(unique(all_sets[data_part=='huang_1', Protein])),
'huang_both' = c(unique(all_sets[data_part=='huang_both', Protein])),
'huang_both_0' = c(unique(all_sets[both_0==T, Protein])),
'huang_both_1' = c(unique(all_sets[both_1==T, Protein])),
'huang_0_1' = c(unique(all_sets[p0_p1==T, Protein]))
)
upset(fromList(input))
intersect(input$huang_0_1, input$huang_both_1)
length(input$huang_0_1)
input <- list('huang_0' = c(unique(all_sets[data_part=='huang_0', Protein])),
'huang_1' = c(unique(all_sets[data_part=='huang_1', Protein])),
'huang_both' = c(unique(all_sets[data_part=='huang_both', Protein])),
'huang_both_0' = c(unique(all_sets[dataset == 'huang' & both_0==T, Protein])),
'huang_both_1' = c(unique(all_sets[dataset == 'huang' & both_1==T, Protein])),
'huang_0_1' = c(unique(all_sets[dataset == 'huang' & p0_p1==T, Protein]))
)
upset(fromList(input))
intersect(input$huang_both, input$huang_0)
length(intersect(input$huang_both, input$huang_0))
upset(fromList(input),
intersections = list(
list('huang_both_0', 'huang_both'),
list('huang_both', 'huang_0')
)
)
length(intersect(input$huang_both_0, input$huang_0))
length(intersect(input$huang_both_0, input$huang_both))
length(intersect(input$huang_both, input$huang_0))
length(distinct(input$huang_both, input$huang_0))
install.packages("ComplexUpset")
library(ComplexUpset)
?ComplexUpset::upset
ComplexUpset::upset(fromList(input),
intersections = list(
list('huang_both_0', 'huang_both'),
list('huang_both', 'huang_0')
)
)
movies = as.data.frame(ggplot2movies::movies)
